<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[javascript数据结构8-图（Graph）]]></title>
      <url>http://yoursite.com/2016/08/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%848-%E5%9B%BE%EF%BC%88Graph%EF%BC%89/</url>
      <content type="html"><![CDATA[<p> <strong>图（graph）</strong><br>图由边的集合及顶点的集合组成<br><strong>有向图：</strong><br><img src="http://img.blog.csdn.net/20151208125116430" alt="有向图"><br><strong>无向图：</strong><br><img src="http://img.blog.csdn.net/20151208125202948" alt="这里写图片描述"><br><strong>代码：</strong>        </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Graph&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	function Graph(v)&#123;</span><br><span class="line">      	this.vertices=v;</span><br><span class="line">      	this.edges=0;</span><br><span class="line">      	this.adj=[];</span><br><span class="line">     	for(var i=0;i&lt;this.vertices;++i)&#123;</span><br><span class="line">        	this.adj[i]=[];</span><br><span class="line">          // this.adj[i].push(&quot;&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      	this.addEdge=addEdge;</span><br><span class="line">      	this.showGraph=showGraph;</span><br><span class="line">      </span><br><span class="line">      //深度优先搜索</span><br><span class="line">      this.dfs=dfs;</span><br><span class="line">      this.marked=[];</span><br><span class="line">      for(var i=0;i&lt;this.vertices;++i)&#123;</span><br><span class="line">        	this.marked[i]=false;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 广度搜索</span><br><span class="line">      this.bfs=bfs;</span><br><span class="line">      	</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	//   增加顶点</span><br><span class="line">  	function addEdge(v,w)&#123;</span><br><span class="line">      	this.adj[v].push(w);</span><br><span class="line">      	this.adj[w].push(v);</span><br><span class="line">		    this.edges++;      </span><br><span class="line">    &#125;</span><br><span class="line">  	</span><br><span class="line">  	//遍历</span><br><span class="line">  	function showGraph()&#123;</span><br><span class="line">      	for(var i=0;i&lt;this.vertices;++i)&#123;</span><br><span class="line">          	document.write(&apos;&lt;br/&gt;&apos;);</span><br><span class="line">          	document.write(i+&quot;--&gt;&quot;);</span><br><span class="line">          	for(var j=0;j&lt;this.vertices;++j)&#123;</span><br><span class="line">              	if(this.adj[i][j]!=undefined)&#123;</span><br><span class="line">                  	document.write(this.adj[i][j]+&apos; &apos;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	//深度优先搜索</span><br><span class="line">  	function dfs(v)&#123;</span><br><span class="line">  		//var w;</span><br><span class="line">  		this.marked[v]=true;</span><br><span class="line">    	if(this.adj[v]!=undefined)&#123;</span><br><span class="line">        	document.write(&quot;&lt;br/&gt;访问的节点:&quot;+v);</span><br><span class="line">      &#125;</span><br><span class="line">      // for(var w in this.adj[v])&#123;</span><br><span class="line">      //console.log(this.adj[0].length);    </span><br><span class="line">          var w=this.adj[v].shift();</span><br><span class="line">          while(w!=undefined)&#123;</span><br><span class="line">              if(!this.marked[w])&#123;</span><br><span class="line">              	this.dfs(w);</span><br><span class="line">              &#125;</span><br><span class="line">              w=this.adj[v].shift();</span><br><span class="line">          &#125;</span><br><span class="line">     </span><br><span class="line">          //console.log(w);</span><br><span class="line">          //console.log(this.adj[v]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 广度搜索</span><br><span class="line">    function bfs(s)&#123;</span><br><span class="line">        var queue=[];</span><br><span class="line">        this.marked[s]=true;</span><br><span class="line">        queue.push(s);//添加到队尾</span><br><span class="line">        var w;  //存放邻接表</span><br><span class="line">        while(queue.length&gt;0)&#123;</span><br><span class="line"></span><br><span class="line">           var v=queue.shift();//从队首删除</span><br><span class="line">           if(v!=undefined)&#123;</span><br><span class="line">              document.write(&quot;&lt;br/&gt;访问的节点:&quot;+v);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">             w=this.adj[v].shift();</span><br><span class="line">             while(w!=undefined)&#123;</span><br><span class="line">                if(!this.marked[w])&#123;</span><br><span class="line">                    this.marked[w]=true;</span><br><span class="line">                    queue.push(w);</span><br><span class="line">                &#125;</span><br><span class="line">                 w=this.adj[v].shift();</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	//测试</span><br><span class="line">  	var  graph=new Graph(5);</span><br><span class="line">  	graph.addEdge(0,1);  </span><br><span class="line">  	graph.addEdge(0,2);  </span><br><span class="line">  	graph.addEdge(1,3);  </span><br><span class="line">  	graph.addEdge(2,4);  </span><br><span class="line">    //console.log(graph);</span><br><span class="line">  	//console.log(graph.adj);</span><br><span class="line">  	graph.showGraph();</span><br><span class="line">    document.write(&quot;&lt;br/&gt;&quot;);</span><br><span class="line">    document.write(&quot;======深度度优先搜索=====&quot;);</span><br><span class="line">    graph.dfs(0);</span><br><span class="line">    document.write(&quot;&lt;br/&gt;&quot;);</span><br><span class="line">    document.write(&quot;======广度优先搜索=====&quot;);</span><br><span class="line">    var  graph1=new Graph(5);</span><br><span class="line">    graph1.addEdge(0,1);  </span><br><span class="line">    graph1.addEdge(0,2);  </span><br><span class="line">    graph1.addEdge(1,3);  </span><br><span class="line">    graph1.addEdge(2,4);  </span><br><span class="line">    graph1.bfs(0);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果：</strong></p>
<blockquote>
<p>0–&gt;1 2<br>1–&gt;0 3<br>2–&gt;0 4<br>3–&gt;1<br>4–&gt;2<br>======深度度优先搜索=====<br>访问的节点:0<br>访问的节点:1<br>访问的节点:3<br>访问的节点:2<br>访问的节点:4<br>======广度优先搜索=====<br>访问的节点:0<br>访问的节点:1<br>访问的节点:2<br>访问的节点:3<br>访问的节点:4            </p>
</blockquote>
<p>深度搜索的含义：<br><img src="http://img.blog.csdn.net/20151208125306927" alt="深度搜索"><br>广度搜索的含义：<br><img src="http://img.blog.csdn.net/20151208125325697" alt="广度搜索"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript数据结构7-二叉搜索树（BST）]]></title>
      <url>http://yoursite.com/2016/08/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%88BST%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="二叉树-："><a href="#二叉树-：" class="headerlink" title="二叉树 ："></a>二叉树 ：</h2><p><img src="http://img.blog.csdn.net/20151110101942285" alt="这里写图片描述"></p>
<p>闲话少说，直接上代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;BST&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //结点</span><br><span class="line">    function Node(data,left,right)&#123;</span><br><span class="line">        this.data=data;</span><br><span class="line">        this.left=left;</span><br><span class="line">        this.right=right;</span><br><span class="line">        this.floor=floor;  //层数</span><br><span class="line">        this.show=show;</span><br><span class="line">    &#125;</span><br><span class="line">    function floor()&#123;</span><br><span class="line">      return this.floor;</span><br><span class="line">    &#125;</span><br><span class="line">    function show()&#123;</span><br><span class="line">        return this.data;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    function BST()&#123;</span><br><span class="line">        this.root=null;</span><br><span class="line">        this.insert=insert; //插入数据</span><br><span class="line">        this.inOrder=inOrder; //中序排列，详细见后面解释</span><br><span class="line">        this.preOrder=preOrder; //先序排序</span><br><span class="line">        this.postOrder=postOrder; //后续排序</span><br><span class="line">        this.getMax=getMax; //得到最大值</span><br><span class="line">      	this.getMin=getMin; //得到最小值</span><br><span class="line">      	this.find=find; //查找</span><br><span class="line">      	this.remove=remove; //删除节点</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function insert(data)&#123;</span><br><span class="line">       var n=new Node(data,null,null);</span><br><span class="line">        if(this.root==null)&#123;</span><br><span class="line">            this.root=n;</span><br><span class="line">            this.root.floor=1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            var current=this.root;</span><br><span class="line">            var parent;</span><br><span class="line">                var c=1;    </span><br><span class="line">            while(true)&#123;</span><br><span class="line">                parent=current;  </span><br><span class="line">                if(data&lt;current.data)&#123;</span><br><span class="line">                        current=current.left;</span><br><span class="line">                        c++;  //计算层数的计数器加1</span><br><span class="line">                    if(current==null)&#123;</span><br><span class="line">                        parent.left=n;</span><br><span class="line">                        parent.left.floor=c;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    current=current.right;</span><br><span class="line">                        c++;   //加1</span><br><span class="line">                    if(current==null)&#123;</span><br><span class="line">                        parent.right=n;</span><br><span class="line">                        //rHeight++;</span><br><span class="line">                        // console.log(&quot;**&quot;+rHeight+&quot;**&quot;);</span><br><span class="line">                        parent.right.floor=c;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  //中序遍历</span><br><span class="line">  function inOrder(node)&#123;</span><br><span class="line">      if(!(node==null))&#123;</span><br><span class="line">          inOrder(node.left);</span><br><span class="line">          document.write(node.show()+&quot; &quot;);</span><br><span class="line">          document.write(&quot;层数&quot;+node.floor+&quot;&lt;br/&gt;&quot;);</span><br><span class="line">          inOrder(node.right);</span><br><span class="line">      &#125;</span><br><span class="line">       //console.count(&quot;inOrder被执行的次数&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  //先序遍历</span><br><span class="line">   function preOrder(node)&#123;</span><br><span class="line">      if(!(node==null))&#123;</span><br><span class="line">          document.write(node.show()+&quot; &quot;);</span><br><span class="line">          preOrder(node.left);</span><br><span class="line">          preOrder(node.right);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //后序遍历</span><br><span class="line">   function postOrder(node)&#123;</span><br><span class="line">      if(!(node==null))&#123;</span><br><span class="line">          postOrder(node.left);        </span><br><span class="line">          postOrder(node.right);</span><br><span class="line">            document.write(node.show()+&quot; &quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //查找最大值</span><br><span class="line">  function getMax()&#123;</span><br><span class="line">     	var current=this.root;</span><br><span class="line">    	while(!(current.right==null))&#123;</span><br><span class="line">          	current=current.right;</span><br><span class="line">        &#125;</span><br><span class="line">    	return current.data;</span><br><span class="line">  &#125;</span><br><span class="line">  //查找最小值</span><br><span class="line">   function getMin()&#123;</span><br><span class="line">     	var current=this.root;</span><br><span class="line">    	while(!(current.left==null))&#123;</span><br><span class="line">          	current=current.left;</span><br><span class="line">        &#125;</span><br><span class="line">    	return current.data;</span><br><span class="line">  &#125;</span><br><span class="line">  //带参数---查找最小值</span><br><span class="line">  function getSmallest(node)&#123;</span><br><span class="line">  		while(!(node.left==null))&#123;</span><br><span class="line">  			node=node.left;</span><br><span class="line">  		&#125;</span><br><span class="line">  	 return node;</span><br><span class="line">  &#125;</span><br><span class="line">  //查找</span><br><span class="line">  function find(data)&#123;</span><br><span class="line">    	var current=this.root;</span><br><span class="line">    	while(current!=null)&#123;</span><br><span class="line">          	if(current.data==data)&#123;</span><br><span class="line">              document.write(&quot;&lt;br/&gt;找到【&quot;+data+&quot;】节点&lt;br/&gt;&quot;);</span><br><span class="line">              return current;</span><br><span class="line">            &#125;else if(data&lt;current.data)&#123;</span><br><span class="line">               current=current.left;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">               current=current.right;</span><br><span class="line">            &#125;</span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line">     document.write(&quot;&lt;br/&gt;没有找到【&quot;+data+&quot;】 节点&lt;br/&gt;&quot;);</span><br><span class="line">//     	return current;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //删除节点-详细解释见后后面</span><br><span class="line">     function remove(data) &#123;</span><br><span class="line">			root = removeNode(this.root, data);</span><br><span class="line">       		//其实root=没有用处，只是保留了函数执行的地址</span><br><span class="line">	&#125;</span><br><span class="line">	function removeNode(node, data) &#123;</span><br><span class="line">          if (node == null) &#123;</span><br><span class="line">				return null;</span><br><span class="line">			&#125;</span><br><span class="line">		if (data == node.data) &#123;</span><br><span class="line">			// 没有子节点的节点</span><br><span class="line">			if (node.left == null &amp;&amp; node.right == null) &#123;</span><br><span class="line">					return null;</span><br><span class="line">			&#125;</span><br><span class="line">			// 没有左子节点的节点</span><br><span class="line">			if (node.left == null) &#123;</span><br><span class="line">					return node.right;</span><br><span class="line">			&#125;</span><br><span class="line">			// 没有右子节点的节点</span><br><span class="line">			if (node.right == null) &#123;</span><br><span class="line">					return node.left;</span><br><span class="line">			&#125;</span><br><span class="line">			// 有两个子节点的节点</span><br><span class="line">			var tempNode = getSmallest(node.right);</span><br><span class="line">			node.data = tempNode.data;</span><br><span class="line">			node.right = removeNode(node.right, tempNode.data);</span><br><span class="line">					return node;</span><br><span class="line">			&#125;</span><br><span class="line">			else if (data &lt; node.data) &#123;</span><br><span class="line">				node.left = removeNode(node.left, data);</span><br><span class="line">               </span><br><span class="line">				return node;</span><br><span class="line">			&#125;</span><br><span class="line">			else &#123;</span><br><span class="line">				node.right = removeNode(node.right, data);</span><br><span class="line">              // console.log(node);</span><br><span class="line">				return node;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  //测试</span><br><span class="line">      var nums=new BST();</span><br><span class="line">      nums.insert(56);</span><br><span class="line">      nums.insert(22);  </span><br><span class="line">      nums.insert(81);</span><br><span class="line">      nums.insert(10);</span><br><span class="line">      nums.insert(30);</span><br><span class="line">      nums.insert(77);</span><br><span class="line">      nums.insert(92);</span><br><span class="line">      nums.insert(100);</span><br><span class="line">      document.write(&quot;*****************中序遍历***************&lt;/br&gt;&quot;);</span><br><span class="line">      inOrder(nums.root);</span><br><span class="line">      document.write(&quot;&lt;/br&gt;***************先序遍历***************&lt;/br&gt;&quot;);</span><br><span class="line">      preOrder(nums.root);</span><br><span class="line">      document.write(&quot;&lt;/br&gt;***************后序遍历***************&lt;/br&gt;&quot;);</span><br><span class="line">      postOrder(nums.root);</span><br><span class="line">      //nums.show();</span><br><span class="line">      //console.log(nums);  </span><br><span class="line">      document.write(&quot;&lt;/br&gt;***************最大值/最小值************&lt;/br&gt;&quot;);</span><br><span class="line">      document.write(nums.getMax()+&quot;/&quot;+nums.getMin());</span><br><span class="line">      document.write(&quot;&lt;/br&gt;***************查找************&lt;/br&gt;&quot;);</span><br><span class="line">  	  nums.find(100);</span><br><span class="line">      document.write(&quot;&lt;/br&gt;***************删除节点81后************&lt;/br&gt;&quot;);</span><br><span class="line">      nums.remove(81);</span><br><span class="line">      console.log(nums);</span><br><span class="line">      preOrder(nums.root);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>结果：<br><img src="http://img.blog.csdn.net/20151110102901708" alt="这里写图片描述"></p>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>中序遍历：<br><img src="http://img.blog.csdn.net/20151110102019745" alt="这里写图片描述"><br>理解双层递归</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inOrder</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(node == <span class="literal">null</span>)) &#123;</span><br><span class="line">        inOrder(node.left);                             <span class="comment">//@1</span></span><br><span class="line">        <span class="built_in">document</span>.document(node.show() + <span class="string">" "</span>);           <span class="comment">//@2</span></span><br><span class="line">        inOrder(node.right);                            <span class="comment">//@3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inOrder(nums.root);    <span class="comment">//开始执行</span></span><br></pre></td></tr></table></figure>
<p>从根节点开始：<br><img src="http://img.blog.csdn.net/20151110102238331" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20151110102715132" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20151110102731867" alt="这里写图片描述"></p>
<h2 id="删除节点："><a href="#删除节点：" class="headerlink" title="删除节点："></a>删除节点：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">		root = removeNode(<span class="keyword">this</span>.root, data);  </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>简单接受待删除的数据，具体执行是removeNode函数；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeNode</span>(<span class="params">node, data</span>) </span>&#123;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><strong>待删除的节点是：</strong><br><strong>1.叶子结点</strong>，只需要将从父节点只想它的链接指向null；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;   </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">null</span>;   <span class="comment">//递归，找到节点置为空即可</span></span><br><span class="line">			&#125;</span><br><span class="line">			   <span class="comment">//其他情况</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (data &lt; node.data) &#123;</span><br><span class="line">				node.left = removeNode(node.left, data);  <span class="comment">//#1            </span></span><br><span class="line">				<span class="keyword">return</span> node; <span class="comment">//#2</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				node.right = removeNode(node.right, data);<span class="comment">//#3</span></span><br><span class="line">				<span class="keyword">return</span> node; <span class="comment">//#4</span></span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>
<p>通过if else逻辑找到node节点</p>
<hr>
<pre><code>//#1  node.left=null(后面的函数递归后返回的值)
//#3  node.right=null(后面的函数递归后返回的值)
</code></pre><hr>
<p><strong>2.只包含一个子节点</strong>，原本指向它的节点指向它的子节点。<br><strong>3.左右子树都有的时候</strong>。两种做法：找到左子树的最大值或者右子树的最小值。这里我们用第二种。</p>
<ul>
<li>查找右子树的最小值，创建一个临时的节点tempNode。</li>
<li>将临时节点的值赋值给待删除节点</li>
<li>删除临时节点</li>
</ul>
<p>注意：</p>
<hr>
<p>//#2 //#4必须有，如果没有，则删除节点下面的所有子树都将被删除。<br>真个过程举个形象的说明，遍历的时候把节点之间的链条解开进行查询，return node；递归查询到最后一级后，由下向上对链条进行缝合。</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript数据结构6-字典 散列 集合]]></title>
      <url>http://yoursite.com/2016/08/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%846-%E5%AD%97%E5%85%B8-%E6%95%A3%E5%88%97-%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<h2 id="6-1-字典"><a href="#6-1-字典" class="headerlink" title="6.1 字典"></a>6.1 字典</h2><p>字典是一种以键- 值对形式存储数据的数据结构，就像电话号码簿里的名字和电话号码一</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;字典sample&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	function Dictionary()&#123;</span><br><span class="line">	   this.add = add;</span><br><span class="line">	   this.datastore = new Array();</span><br><span class="line">	   this.find = find;</span><br><span class="line">	   this.remove = remove;</span><br><span class="line">	   this.showAll = showAll;</span><br><span class="line">	   this.count = count;</span><br><span class="line">	   this.clear = clear;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	function add(key, value) &#123;</span><br><span class="line">	   this.datastore[key] = value;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	function find(key) &#123;</span><br><span class="line">	   return this.datastore[key];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	function remove(key) &#123;</span><br><span class="line">	   delete this.datastore[key];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	function showAll() &#123;</span><br><span class="line">	if(this.datastore!=null)&#123;</span><br><span class="line">	   var datakeys=Array.prototype.slice.call(Object.keys(this.datastore));</span><br><span class="line">	   for (var key in datakeys) &#123;</span><br><span class="line">	      document.write(datakeys[key] + &quot; -&gt; &quot; + this.datastore[datakeys[key]]+&quot; &quot;);</span><br><span class="line">	      // console.log(Object.keys(this.datastore));</span><br><span class="line">	      console.log(key);</span><br><span class="line">	   &#125;</span><br><span class="line">	 &#125;else&#123;</span><br><span class="line">	 	document.write(&quot;字典为空&quot;);</span><br><span class="line">	 &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	function count() &#123;</span><br><span class="line">	   var n = 0;</span><br><span class="line">	   for  (var key in Object.keys(this.datastore)) &#123;</span><br><span class="line">	      ++n;</span><br><span class="line">	   &#125;</span><br><span class="line">	   return n;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	function clear() &#123;</span><br><span class="line">	   // for  (var key in Object.keys(this.datastore)) &#123;</span><br><span class="line">	   //    delete this.datastore[key];</span><br><span class="line">	   // &#125; </span><br><span class="line">	   delete this.datastore;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//测试</span><br><span class="line">	var dic=new Dictionary();</span><br><span class="line">	dic.add(&quot;123&quot;,&quot;R&quot;);</span><br><span class="line">	dic.add(&quot;456&quot;,&quot;Python&quot;);</span><br><span class="line">	dic.add(&quot;789&quot;,&quot;JavaScipt&quot;);</span><br><span class="line">	document.write(&quot;&lt;/br&gt;**************字典数目**************&lt;/br&gt;&quot;);</span><br><span class="line">	var n=dic.count();</span><br><span class="line">	document.write(n);</span><br><span class="line">	document.write(&quot;&lt;/br&gt;**************全部显示**************&lt;/br&gt;&quot;);</span><br><span class="line">	dic.showAll();</span><br><span class="line">	document.write(&quot;&lt;/br&gt;**************删除123---&gt;R*************&lt;/br&gt;&quot;);</span><br><span class="line">	dic.remove(&quot;123&quot;);</span><br><span class="line">	dic.showAll();</span><br><span class="line">	document.write(&quot;&lt;/br&gt;**************清除**************&lt;/br&gt;&quot;);</span><br><span class="line">	dic.clear();</span><br><span class="line">	dic.showAll();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="6-2-散列（HashTable）"><a href="#6-2-散列（HashTable）" class="headerlink" title="6.2 散列（HashTable）"></a>6.2 散列（HashTable）</h2><p>它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度<br>使用：MD5 和 SHA-1 可以说是目前应用最广泛的Hash算法<br>    java中已经实现<br><img src="http://img.blog.csdn.net/20151110094955099" alt="这里写图片描述"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;HashTable散列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	function HashTable() &#123;</span><br><span class="line">	   this.table = new Array(137); //为了避免碰撞，首先要确保散列表中用来存储数据的数组其大小是个质数。这一点很关</span><br><span class="line">键，这和计算散列值时使用的取余运算有关。</span><br><span class="line">	   this.simpleHash = simpleHash;   //简单的散列表</span><br><span class="line">	   this.betterHash = betterHash;   //更好的HashTable，避免碰撞</span><br><span class="line">	   this.showDistro = showDistro;</span><br><span class="line">	   this.put = put;</span><br><span class="line">	   //this.get = get;</span><br><span class="line">	&#125;</span><br><span class="line">	function put(data) &#123;</span><br><span class="line">	   var pos = this.simpleHash(data);</span><br><span class="line">	   this.table[pos] = data;</span><br><span class="line">	&#125;</span><br><span class="line">	   </span><br><span class="line">	function simpleHash(data) &#123;</span><br><span class="line">	   var total = 0;</span><br><span class="line">	   for (var i = 0; i &lt; data.length; ++i) &#123;</span><br><span class="line">	      total += data.charCodeAt(i);</span><br><span class="line">	   &#125;</span><br><span class="line">	   document.write(&quot;Hash value: &quot; + data + &quot; -&gt; &quot; + total+&quot;&lt;br/&gt;&quot;);</span><br><span class="line">	   return total % this.table.length;</span><br><span class="line">	&#125;</span><br><span class="line">	function showDistro() &#123;</span><br><span class="line">	   var n = 0;</span><br><span class="line">	   for (var i = 0; i &lt; this.table.length; ++i) &#123;</span><br><span class="line">	      if (this.table[i] != undefined) &#123;</span><br><span class="line">	         document.write(i + &quot;: &quot; + this.table[i]+&quot;&lt;br/&gt;&quot;);</span><br><span class="line">	      &#125;</span><br><span class="line">	   &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	function betterHash(string) &#123;</span><br><span class="line">	   const H = 31;  //较小的质数  书上37不行 </span><br><span class="line">	   var total = 0;</span><br><span class="line">	   for (var i = 0; i &lt; string.length; ++i) &#123;</span><br><span class="line">	      total += H * total + string.charCodeAt(i);</span><br><span class="line">	   &#125;</span><br><span class="line">	   total = total % this.table.length;</span><br><span class="line">	   if (total &lt; 0) &#123;</span><br><span class="line">	      total += this.table.length-1;</span><br><span class="line">	   &#125;</span><br><span class="line">	   return parseInt(total);</span><br><span class="line">	&#125;</span><br><span class="line">	var someNames = [&quot;David&quot;, &quot;Jennifer&quot;, &quot;Donnie&quot;, &quot;Raymond&quot;,</span><br><span class="line">                 &quot;Cynthia&quot;, &quot;Mike&quot;, &quot;Clayton&quot;, &quot;Danny&quot;, &quot;Jonathan&quot;];</span><br><span class="line">	var hTable = new HashTable();</span><br><span class="line">	</span><br><span class="line">	for (var i = 0; i &lt; someNames.length; ++i) &#123;</span><br><span class="line">  		 hTable.put(someNames[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	hTable.showDistro();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20151110095013990" alt="这里写图片描述"><br>这就是碰撞，为避免碰撞，使用betterHash<br>修改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">put</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">	   <span class="comment">// var pos = this.simpleHash(data);</span></span><br><span class="line">	   <span class="keyword">var</span> pos = <span class="keyword">this</span>.betterHash(data);</span><br><span class="line">	   <span class="keyword">this</span>.table[pos] = data;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript数据结构5-链表2 存放点数据（x,y）]]></title>
      <url>http://yoursite.com/2016/08/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%845-%E9%93%BE%E8%A1%A82%20%E5%AD%98%E6%94%BE%E7%82%B9%E6%95%B0%E6%8D%AE%EF%BC%88x,y%EF%BC%89/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  </span><br><span class="line">function Node(element)&#123;</span><br><span class="line">  this.element=element;</span><br><span class="line">  this.next=null;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function Point(x,y)&#123;</span><br><span class="line">   this.x=x;</span><br><span class="line">    this.y=y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function LList()&#123;</span><br><span class="line">    this.head=new Node(&apos;head&apos;);</span><br><span class="line">    //this.head.next=this.head;</span><br><span class="line">    this.find=find;</span><br><span class="line">    this.insert=insert;</span><br><span class="line">    this.display=display;</span><br><span class="line">    this.remove=remove;</span><br><span class="line">    this.findPrevious=findPrevious;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function display()&#123;</span><br><span class="line">    var curr=this.head;</span><br><span class="line">    while(!(curr.next==null))&#123;</span><br><span class="line">       document.write(curr.next.element.x+&apos;/&apos;+curr.next.element.y);</span><br><span class="line">      curr=curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return curr;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    function find(item)&#123;</span><br><span class="line">      var currNode=this.head;</span><br><span class="line">      while(!(currNode.element==item))&#123;currNode=currNode.next;</span><br><span class="line">  &#125;</span><br><span class="line">  return currNode;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function insert(newElement, item) &#123;</span><br><span class="line">   var newNode = new Node(newElement);</span><br><span class="line">   var current = this.find(item);</span><br><span class="line">   newNode.next = current.next;</span><br><span class="line">   current.next = newNode;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function  findPrevious(item)&#123;</span><br><span class="line">    var currNode=this.head;</span><br><span class="line">    while(!(currNode.next==null)&amp;&amp;(currNode.next.element!=item))&#123;</span><br><span class="line">      currNode=currNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return currNode;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   function remove(item)&#123;</span><br><span class="line">     var prevNode=this.findPrevious(item);</span><br><span class="line">     if((prevNode.next!=null))&#123;</span><br><span class="line">       prevNode.next=prevNode.next.next;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   var p1=new Point(1,2);</span><br><span class="line">   var p2=new Point(3,4);</span><br><span class="line">   </span><br><span class="line">   //document.write(p2.x);</span><br><span class="line">  // console.log(p1);</span><br><span class="line">   var points=new LList();</span><br><span class="line">    points.insert(p1,&apos;head&apos;);</span><br><span class="line">    points.insert(p2,p1);</span><br><span class="line">    points.display();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript数据结构5-链表（包括循环链表 双向链表）]]></title>
      <url>http://yoursite.com/2016/08/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%845-%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8C%85%E6%8B%AC%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="1-一般链表"><a href="#1-一般链表" class="headerlink" title="1.一般链表"></a>1.一般链表</h2><p>图解链表：<br><img src="http://img.blog.csdn.net/20151020163459524" alt="这里写图片描述"><br>链表<br><img src="http://img.blog.csdn.net/20151020163616943" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20151020163716990" alt="这里写图片描述"></p>
<p>实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; &gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    function Node(ele) &#123;</span><br><span class="line">        this.ele=ele;</span><br><span class="line">        this.next=null;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    function LList()&#123;</span><br><span class="line">    	   this.head=new Node(&quot;head&quot;);</span><br><span class="line">     	   this.find=find;</span><br><span class="line">      	   this.insert=insert;</span><br><span class="line">           this.findPrevious=findPrevious;</span><br><span class="line">           this.remove=remove;</span><br><span class="line">           this.display=display;</span><br><span class="line">       // this.Node=Node;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      function find(item)&#123;</span><br><span class="line">        	var currNode=this.head;</span><br><span class="line">     		 // document.write(currNode);</span><br><span class="line">      		 // console.log(currNode);</span><br><span class="line">            while(currNode.ele!=item)</span><br><span class="line">      		  &#123;currNode=currNode.next;&#125;</span><br><span class="line">      		  return currNode;</span><br><span class="line">      &#125;</span><br><span class="line">      function insert(newElement,item)</span><br><span class="line">      &#123;</span><br><span class="line">      var newNode=new Node(newElement);</span><br><span class="line">      var current=this.find(item);</span><br><span class="line">       newNode.next=current.next;</span><br><span class="line">       current.next=newNode;</span><br><span class="line">      &#125;</span><br><span class="line">      function display()&#123;</span><br><span class="line">      var currNode=this.head;</span><br><span class="line">        while(!(currNode.next==null))</span><br><span class="line">        &#123;document.write(currNode.next.ele+&quot; &quot;);</span><br><span class="line">         currNode=currNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      function findPrevious(item)&#123;</span><br><span class="line">        var currNode=this.head;</span><br><span class="line">        while(!(currNode.next==null)&amp;&amp;(currNode.next.ele != item))&#123;</span><br><span class="line">            currNode=currNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">           return currNode;</span><br><span class="line">      &#125;</span><br><span class="line">      function remove(item)&#123;</span><br><span class="line">         var prevNode=this.findPrevious(item);</span><br><span class="line">       // document.write(prevNode.ele);</span><br><span class="line">        if(!(prevNode.next==null))&#123;</span><br><span class="line">           prevNode.next=prevNode.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     var cities=new LList();</span><br><span class="line">      document.write(&quot;=========插入数据==========&lt;br/&gt;&quot;);</span><br><span class="line">      cities.insert(&quot;Con&quot;,&quot;head&quot;);</span><br><span class="line">      cities.insert(&quot;Rus&quot;,&quot;Con&quot;);</span><br><span class="line">      cities.insert(&quot;Alm&quot;,&quot;Rus&quot;);</span><br><span class="line">      cities.insert(&quot;Tom&quot;,&quot;Alm&quot;);</span><br><span class="line">      cities.display();</span><br><span class="line">      document.write(&quot;&lt;br/&gt;=========删除数据==========&lt;br/&gt;&quot;);</span><br><span class="line">      cities.remove(&quot;Rus&quot;);</span><br><span class="line">      cities.display();</span><br><span class="line">      </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>对比：find()  findPrevious()<br>while语句多了条件<strong>!(currNode.next==null)</strong><br>这个能保证remove()调用时候，删除链表中没有的节点，会返回最后一个节点，这样remove()执行没有任何结果，而链表能够正常的显示。find()中不能使用，原理一样，想一想为什么？</p>
<h2 id="2-双向链表"><a href="#2-双向链表" class="headerlink" title="2.双向链表"></a>2.双向链表</h2><p><img src="http://img.blog.csdn.net/20151020164155783" alt="这里写图片描述"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">	&lt;title&gt;无标题&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">	function Node(element) &#123;</span><br><span class="line">			this.element = element;</span><br><span class="line">			this.next = null;</span><br><span class="line">			this.previous = null;</span><br><span class="line">	&#125;</span><br><span class="line">	function LList() &#123;</span><br><span class="line">		this.head = new Node(&quot;head&quot;);</span><br><span class="line">		this.find = find;</span><br><span class="line">		this.insert = insert;</span><br><span class="line">		this.display = display;</span><br><span class="line">		this.remove = remove;</span><br><span class="line">		this.findLast = findLast;</span><br><span class="line">		this.dispReverse = dispReverse;</span><br><span class="line">	&#125;</span><br><span class="line">	function dispReverse() &#123;</span><br><span class="line">		var currNode = this.head;</span><br><span class="line">		currNode = this.findLast();</span><br><span class="line">		while (!(currNode.previous == null)) &#123;</span><br><span class="line">			document.write(currNode.element+&quot; &quot;);</span><br><span class="line">			currNode = currNode.previous;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	function findLast() &#123;</span><br><span class="line">		var currNode = this.head;</span><br><span class="line">		while (!(currNode.next == null)) &#123;</span><br><span class="line">			currNode = currNode.next;</span><br><span class="line">		&#125;</span><br><span class="line">		return currNode;</span><br><span class="line">	&#125;</span><br><span class="line">	function remove(item) &#123;</span><br><span class="line">		var currNode = this.find(item);</span><br><span class="line">		if (!(currNode.next == null)) &#123;</span><br><span class="line">			currNode.previous.next = currNode.next;</span><br><span class="line">			currNode.next.previous = currNode.previous;</span><br><span class="line">			currNode.next = null;</span><br><span class="line">			currNode.previous = null;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	//findPrevious 没用了，注释掉</span><br><span class="line">	/*function findPrevious(item) &#123;</span><br><span class="line">	var currNode = this.head;</span><br><span class="line">	while (!(currNode.next == null) &amp;&amp;</span><br><span class="line">	(currNode.next.element != item)) &#123;</span><br><span class="line">	currNode = currNode.next;</span><br><span class="line">	&#125;</span><br><span class="line">	return currNode;</span><br><span class="line">	&#125;*/</span><br><span class="line">	function display() &#123;</span><br><span class="line">		var currNode = this.head;</span><br><span class="line">		while (!(currNode.next == null)) &#123;</span><br><span class="line">		document.write(currNode.next.element+&quot; &quot;);</span><br><span class="line">		currNode = currNode.next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	function find(item) &#123;</span><br><span class="line">		var currNode = this.head;</span><br><span class="line">		while (currNode.element != item) &#123;</span><br><span class="line">		currNode = currNode.next;</span><br><span class="line">		&#125;</span><br><span class="line">		return currNode;</span><br><span class="line">	&#125;</span><br><span class="line">	function insert(newElement, item) &#123;</span><br><span class="line">		var newNode = new Node(newElement);</span><br><span class="line">		var current = this.find(item);</span><br><span class="line">		newNode.next = current.next;  //1</span><br><span class="line">		newNode.previous = current;   //2</span><br><span class="line">		current.next = newNode;       //3</span><br><span class="line">	&#125;</span><br><span class="line">	var cities = new LList();</span><br><span class="line">	cities.insert(&quot;Conway&quot;, &quot;head&quot;);</span><br><span class="line">	cities.insert(&quot;Russellville&quot;, &quot;Conway&quot;);</span><br><span class="line">	cities.insert(&quot;Carlisle&quot;, &quot;Russellville&quot;);</span><br><span class="line">	cities.insert(&quot;Alma&quot;, &quot;Carlisle&quot;);</span><br><span class="line">	//cities.insert(&quot;C&quot;, &quot;Russellville&quot;); //按照原程序写的话，出现很大问题</span><br><span class="line">	cities.display();</span><br><span class="line">	document.write(&quot;&lt;br/&gt;&quot;);</span><br><span class="line">	cities.remove(&quot;Carlisle&quot;);</span><br><span class="line">	cities.display();</span><br><span class="line">	document.write(&quot;&lt;br/&gt;&quot;);</span><br><span class="line">	cities.dispReverse();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>这是可以完全运行，但是加上黄色的一句话（从中间随便插入一句）就会出现问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Conway Russellville C Carlisle Alma </span><br><span class="line">Conway Russellville Alma   //C不显示了</span><br><span class="line">Alma Russellville Conway</span><br></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20151020164454697" alt="这里写图片描述"><br>看链表结构：<br>1,2,3条线都有，但是从中间插入的时候，会发现缺少4是不行的，于是insert()函数加上这句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(newNode.next!=null)&#123;</span><br><span class="line">	newNode.next.previous=newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就行了。同样书中的删除节点图解，也是知识考虑了在尾部删除</p>
<p><img src="http://img.blog.csdn.net/20151020163955246" alt="这里写图片描述"></p>
<p>存储一个对象的时候：点对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  </span><br><span class="line">function Node(element)&#123;</span><br><span class="line">  this.element=element;</span><br><span class="line">  this.next=null;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function Point(x,y)&#123;</span><br><span class="line">   this.x=x;</span><br><span class="line">    this.y=y;</span><br><span class="line">  &#125;</span><br><span class="line">  function LList()&#123;</span><br><span class="line">    this.head=new Node(&apos;head&apos;);</span><br><span class="line">    //this.head.next=this.head;</span><br><span class="line">    this.find=find;</span><br><span class="line">    this.insert=insert;</span><br><span class="line">    this.display=display;</span><br><span class="line">    this.remove=remove;</span><br><span class="line">    this.findPrevious=findPrevious;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function display()&#123;</span><br><span class="line">    var curr=this.head;</span><br><span class="line">    while(!(curr.next==null))&#123;</span><br><span class="line">       document.write(curr.next.element.x+&apos;/&apos;+curr.next.element.y);</span><br><span class="line">      curr=curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return curr;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    function find(item)&#123;</span><br><span class="line">      var currNode=this.head;</span><br><span class="line">      while(!(currNode.element==item))&#123;currNode=currNode.next;</span><br><span class="line">  &#125;</span><br><span class="line">  return currNode;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function insert(newElement, item) &#123;</span><br><span class="line">   var newNode = new Node(newElement);</span><br><span class="line">   var current = this.find(item);</span><br><span class="line">   newNode.next = current.next;</span><br><span class="line">   current.next = newNode;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function  findPrevious(item)&#123;</span><br><span class="line">    var currNode=this.head;</span><br><span class="line">    while(!(currNode.next==null)&amp;&amp;(currNode.next.element!=item))&#123;</span><br><span class="line">      currNode=currNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return currNode;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   function remove(item)&#123;</span><br><span class="line">     var prevNode=this.findPrevious(item);</span><br><span class="line">     if((prevNode.next!=null))&#123;</span><br><span class="line">       prevNode.next=prevNode.next.next;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   var p1=new Point(1,2);</span><br><span class="line">   var p2=new Point(3,4);</span><br><span class="line">   </span><br><span class="line">   //document.write(p2.x);</span><br><span class="line">  // console.log(p1);</span><br><span class="line">   var points=new LList();</span><br><span class="line">    points.insert(p1,&apos;head&apos;);</span><br><span class="line">    points.insert(p2,p1);</span><br><span class="line">    points.display();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-循环链表"><a href="#3-循环链表" class="headerlink" title="3.循环链表"></a>3.循环链表</h2><p><img src="http://img.blog.csdn.net/20151020164724099" alt="这里写图片描述"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">	&lt;title&gt;循环链表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">	function Node(element) &#123;</span><br><span class="line">			this.element = element;</span><br><span class="line">			this.next = null;</span><br><span class="line">	&#125;</span><br><span class="line">	function LList() &#123;</span><br><span class="line">		this.head = new Node(&quot;head&quot;);</span><br><span class="line">		this.head.next=this.head;</span><br><span class="line">		this.find = find;</span><br><span class="line">		this.insert = insert;</span><br><span class="line">		this.display = display;</span><br><span class="line">		this.remove = remove;</span><br><span class="line">	&#125;</span><br><span class="line">	function remove(item) &#123;</span><br><span class="line">		var currNode = this.find(item);</span><br><span class="line">		if (!(currNode.next == null)) &#123;</span><br><span class="line">			currNode.previous.next = currNode.next;</span><br><span class="line">			currNode.next.previous = currNode.previous;</span><br><span class="line">			currNode.next = null;</span><br><span class="line">			currNode.previous = null;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	function display() &#123;</span><br><span class="line">		var currNode = this.head;</span><br><span class="line">		while (!(currNode.next.element==&quot;head&quot;)&amp;&amp;!(currNode.next == null)) &#123;</span><br><span class="line">			document.write(currNode.next.element+&quot; &quot;);</span><br><span class="line">			currNode = currNode.next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	function find(item) &#123;</span><br><span class="line">		var currNode = this.head;</span><br><span class="line">		while (!(currNode.next.element==&quot;head&quot;)&amp;&amp;(currNode.element != item)) &#123;</span><br><span class="line">			currNode = currNode.next;</span><br><span class="line">		&#125;</span><br><span class="line">		return currNode;</span><br><span class="line">	&#125;</span><br><span class="line">	function insert(newElement, item) &#123;</span><br><span class="line">		var newNode = new Node(newElement);</span><br><span class="line">		var currNode = this.find(item);</span><br><span class="line">		if(!(currNode.next.element==&quot;head&quot;))&#123;</span><br><span class="line">			newNode.next=currNode.next;  //从中间插入</span><br><span class="line">			currNode.next=newNode;</span><br><span class="line">		&#125;else&#123; //从尾部插入</span><br><span class="line">			newNode.next=this.head;  //从中间插入</span><br><span class="line">			currNode.next=newNode;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	var cities = new LList();</span><br><span class="line">	cities.insert(&quot;Conway&quot;, &quot;head&quot;);</span><br><span class="line">	cities.insert(&quot;Russellville&quot;, &quot;Conway&quot;);</span><br><span class="line">	cities.insert(&quot;Carlisle&quot;, &quot;Russellville&quot;);</span><br><span class="line">	cities.insert(&quot;Alma&quot;, &quot;Carlisle&quot;);</span><br><span class="line">	cities.insert(&quot;C&quot;, &quot;Russellville&quot;); </span><br><span class="line">	//cities.insert(&quot;D&quot;, &quot;Rus&quot;); </span><br><span class="line">	cities.display();</span><br><span class="line">	</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript数据结构4-队列2-基数排序]]></title>
      <url>http://yoursite.com/2016/08/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%844-%E9%98%9F%E5%88%972-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>第一次按个位上的数字进行排序，第二次按十位上的数字进行排序  </p>
<p>排序：91, 46, 85, 15, 92, 35, 31, 22<br><strong>经过基数排序第一次扫描</strong>之后，数字被分配到如下盒子中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Bin 0:</span><br><span class="line">Bin 1: 91, 31</span><br><span class="line">Bin 2: 92, 22</span><br><span class="line">Bin 3:</span><br><span class="line">Bin 4:</span><br><span class="line">Bin 5: 85, 15, 35</span><br><span class="line">Bin 6: 46</span><br><span class="line">Bin 7:</span><br><span class="line">Bin 8:</span><br><span class="line">Bin 9:</span><br></pre></td></tr></table></figure>
<p>根据盒子的顺序，对数字进行第一次排序的结果如下：<br>91, 31, 92, 22, 85, 15, 35, 46<br>然后根据<strong>十位上的数值再将上次排序</strong>的结果分配到不同的盒子中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Bin 0:</span><br><span class="line">Bin 1: 15</span><br><span class="line">Bin 2: 22</span><br><span class="line">Bin 3: 31, 35</span><br><span class="line">Bin 4: 46</span><br><span class="line">Bin 5:</span><br><span class="line">Bin 6:</span><br><span class="line">Bin 7:</span><br><span class="line">Bin 8: 85</span><br><span class="line">Bin 9: 91, 92</span><br></pre></td></tr></table></figure>
<p>Javascript实现代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-8 /&gt; </span><br><span class="line">	&lt;title&gt;Queue Sample&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">      </span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   	    /*定义队列*/</span><br><span class="line">   	    function Queue()&#123;</span><br><span class="line">   	    	this.dataStore=[];</span><br><span class="line">   	    	this.enqueue=enqueue;</span><br><span class="line">   	    	this.dequeue=dequeue;</span><br><span class="line">          this.front=front;</span><br><span class="line">          this.back=back;</span><br><span class="line">          this.toStr=toStr;</span><br><span class="line">          this.isEmpty=isEmpty;</span><br><span class="line">   	    &#125;</span><br><span class="line">     </span><br><span class="line">     function enqueue(element)&#123;</span><br><span class="line">         this.dataStore.push(element);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function dequeue()&#123;</span><br><span class="line">        return this.dataStore.shift();</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function front()&#123;</span><br><span class="line">     	return this.dataStore[0];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function back()&#123;</span><br><span class="line">     	return this.dataStore[this.dataStore.length-1];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function toStr()&#123;</span><br><span class="line">      	var retStr=&quot;&quot;;</span><br><span class="line">        for(var i=0;i&lt;this.dataStore.length;i++)&#123;</span><br><span class="line">        	retStr+=this.dataStore[i]+&quot;\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        //console.log(retStr);</span><br><span class="line">         return retStr;</span><br><span class="line">     &#125;</span><br><span class="line">     //判断是否为空</span><br><span class="line">     function isEmpty()&#123;</span><br><span class="line">      	  if(this.dataStore.length==0)&#123;</span><br><span class="line">          		return true;</span><br><span class="line">          	&#125;else&#123;</span><br><span class="line">           		return false;   </span><br><span class="line">           	&#125;</span><br><span class="line">     &#125;</span><br><span class="line">  //========================================================================</span><br><span class="line">     function distribute(nums, queues, n, digit) &#123;</span><br><span class="line">        for (var i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">          if (digit == 1) &#123;  //个位</span><br><span class="line">              queues[nums[i]%10].enqueue(nums[i]);</span><br><span class="line">            &#125; else &#123;  //十位</span><br><span class="line">              queues[Math.floor(nums[i] / 10)].enqueue(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    function collect(queues, nums) &#123;</span><br><span class="line">        var i = 0;</span><br><span class="line">        for (var digit = 0; digit &lt; 10; ++digit) &#123;</span><br><span class="line">            while (!queues[digit].isEmpty()) &#123;  </span><br><span class="line">            nums[i++] = queues[digit].dequeue();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     function dispArray(arr)&#123;</span><br><span class="line">       for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">         document.write(arr[i]+&quot; &quot;);</span><br><span class="line">         // document.write(&apos;&lt;br/&gt;&apos;);</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">    var  N=200;//N是要排序的个数 基数排序测试时间：: 4.000ms</span><br><span class="line">    var queues=[];</span><br><span class="line">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">      queues[i]=new Queue(); //分别存储Bin0--bin9</span><br><span class="line">     &#125;;</span><br><span class="line">    var nums=[];</span><br><span class="line">    for (var i = 0; i &lt; N; i++) &#123;</span><br><span class="line">       nums[i]=Math.floor(Math.random()*101);</span><br><span class="line">       // document.write(nums[i]);</span><br><span class="line">       // document.write(&apos;&lt;br/&gt;&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /*********************/</span><br><span class="line">    /*测试一下时间*/</span><br><span class="line">    console.time(&quot;基数排序测试时间：&quot;);//改变N的值进行测试</span><br><span class="line">    document.write(&quot;原数据：&quot;);</span><br><span class="line">    dispArray(nums);</span><br><span class="line">    distribute(nums,queues,N,1);</span><br><span class="line">    collect(queues,nums);   //nums分散了，收集起来</span><br><span class="line">    document.write(&quot;&lt;br/&gt;个位排序后：&quot;);</span><br><span class="line">    dispArray(nums);</span><br><span class="line">    distribute(nums,queues,N,10);</span><br><span class="line">    collect(queues,nums); </span><br><span class="line">    document.write(&quot;&lt;br/&gt;基数排序后：&quot;);  </span><br><span class="line">    dispArray(nums);</span><br><span class="line">    console.timeEnd(&quot;基数排序测试时间：&quot;);</span><br><span class="line">    </span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript数据结构4-队列]]></title>
      <url>http://yoursite.com/2016/08/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%844-%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>队列是一种先进先出（FIFO，first-in-first-out）的数据结构</p>
<p><strong>javascript代码实现队列：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-8 /&gt; </span><br><span class="line">	&lt;title&gt;Queue Sample&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">      </span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   	    /*定义队列*/</span><br><span class="line">   	    function Queue()&#123;</span><br><span class="line">   	    	this.dataStore=[];</span><br><span class="line">   	    	this.enqueue=enqueue;</span><br><span class="line">   	    	this.dequeue=dequeue;</span><br><span class="line">          this.front=front;</span><br><span class="line">          this.back=back;</span><br><span class="line">          this.toStr=toStr;</span><br><span class="line">          this.isEmpty=isEmpty;</span><br><span class="line">   	    &#125;</span><br><span class="line">     </span><br><span class="line">     function enqueue(element)&#123;</span><br><span class="line">         this.dataStore.push(element);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function dequeue()&#123;</span><br><span class="line">        return this.dataStore.shift();</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function front()&#123;</span><br><span class="line">     	return this.dataStore[0];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function back()&#123;</span><br><span class="line">     	return this.dataStore[this.dataStore.length-1];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function toStr()&#123;</span><br><span class="line">      	var retStr=&quot;&quot;;</span><br><span class="line">        for(var i=0;i&lt;this.dataStore.length;i++)&#123;</span><br><span class="line">        	retStr+=this.dataStore[i]+&quot;\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        //console.log(retStr);</span><br><span class="line">         return retStr;</span><br><span class="line">     &#125;</span><br><span class="line">     //判断是否为空</span><br><span class="line">     function isEmpty()&#123;</span><br><span class="line">      	  if(this.dataStore.length==0)&#123;</span><br><span class="line">          		return true;</span><br><span class="line">          	&#125;else&#123;</span><br><span class="line">           		return false;   </span><br><span class="line">           	&#125;</span><br><span class="line">     &#125;</span><br><span class="line">     var que=new Queue();</span><br><span class="line">     que.enqueue(&quot;Tom&quot;);</span><br><span class="line">     que.enqueue(&quot;Sam&quot;);</span><br><span class="line">     que.enqueue(&quot;Pom&quot;);</span><br><span class="line">     console.log(que.dataStore.length);</span><br><span class="line">     document.write(que.toStr());</span><br><span class="line">     que.dequeue();</span><br><span class="line">     document.write(que.toStr());</span><br><span class="line">    console.log(que.toStr);</span><br><span class="line"></span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>举个案例：</strong><br>常用队列模拟排队的人。下面我们使用队列来模拟跳方块舞的人。<br>当男男女女来到舞池，他们按照自己的性别排成两队。当舞池中有地方空出来时，选两个队列中的第一个人组成舞伴。他们身后的人各自向前移动一位，变成新的队首。当一对舞伴迈入舞池时，主持人会大声喊出他们的名字。当一对舞伴走出舞池，且两排队伍中有任意一队没人时，主持人也会把这个情况告诉大家。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-8 /&gt; </span><br><span class="line">	&lt;title&gt;Queue Sample&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">      </span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   	    /*定义队列*/</span><br><span class="line">   	    function Queue()&#123;</span><br><span class="line">   	    	this.dataStore=[];</span><br><span class="line">   	    	this.enqueue=enqueue;</span><br><span class="line">   	    	this.dequeue=dequeue;</span><br><span class="line">          this.front=front;</span><br><span class="line">          this.back=back;</span><br><span class="line">          this.toStr=toStr;</span><br><span class="line">          this.isEmpty=isEmpty;</span><br><span class="line">   	    &#125;</span><br><span class="line">     </span><br><span class="line">     function enqueue(element)&#123;</span><br><span class="line">         this.dataStore.push(element);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function dequeue()&#123;</span><br><span class="line">        return this.dataStore.shift();</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function front()&#123;</span><br><span class="line">     	return this.dataStore[0];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function back()&#123;</span><br><span class="line">     	return this.dataStore[this.dataStore.length-1];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function toStr()&#123;</span><br><span class="line">      	var retStr=&quot;&quot;;</span><br><span class="line">        for(var i=0;i&lt;this.dataStore.length;i++)&#123;</span><br><span class="line">        	retStr+=this.dataStore[i]+&quot;\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        //console.log(retStr);</span><br><span class="line">         return retStr;</span><br><span class="line">     &#125;</span><br><span class="line">     //判断是否为空</span><br><span class="line">     function isEmpty()&#123;</span><br><span class="line">      	  if(this.dataStore.length==0)&#123;</span><br><span class="line">          		return true;</span><br><span class="line">          	&#125;else&#123;</span><br><span class="line">           		return false;   </span><br><span class="line">           	&#125;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">      //舞蹈员性别  姓名</span><br><span class="line">    var  allStr=&quot;F Shun F Tim M Huipin M Lanlan F Ping F Li F Lou M Funr F Sun M Pop&quot;;  </span><br><span class="line">     </span><br><span class="line">      function Dancer(name,sex)&#123;</span><br><span class="line">      	this.name=name;</span><br><span class="line">        this.sex=sex;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">     //男女分队</span><br><span class="line">     function getDancers(males,females)&#123;</span><br><span class="line">          var numbers=allStr.split(&quot; &quot;);</span><br><span class="line">         //document.write(numbers);</span><br><span class="line">          //console.log(numbers);</span><br><span class="line">          for(var i=0;i&lt;numbers.length-1;++i)&#123;</span><br><span class="line">             //var dances=numbers[i].trim();</span><br><span class="line">             var sex=numbers[i];</span><br><span class="line">             i++;</span><br><span class="line">             var name=numbers[i]; </span><br><span class="line">            //console.log(name);</span><br><span class="line">            //console.log(sex);</span><br><span class="line">            if(sex == &quot;F&quot;)&#123;  //??????</span><br><span class="line">            	 famaleDances.enqueue(new Dancer(name,sex));</span><br><span class="line">                 console.log(famaleDances);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">            	 maleDances.enqueue(new Dancer(name,sex));//整体对象存在队列中</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; </span><br><span class="line">       //队首男女就是要出队的</span><br><span class="line">       function dance(males,famales)&#123;</span><br><span class="line">       		document.write(&quot;The dance parter are: &quot;);</span><br><span class="line">            document.write(&quot;&lt;br /&gt;&quot;);</span><br><span class="line">            while(!males.isEmpty() &amp;&amp; !famales.isEmpty())&#123;</span><br><span class="line">                fperson=famales.dequeue();</span><br><span class="line">               // console.log(fperson);</span><br><span class="line">                document.write(&quot;The Famale dance  is:&quot;+fperson.name);               </span><br><span class="line">                person=males.dequeue();</span><br><span class="line">                document.write(&quot; and The Male dance  is:&quot;+person.name);</span><br><span class="line">              	document.write(&quot;&lt;br /&gt;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125; </span><br><span class="line">      var maleDances=new Queue();</span><br><span class="line">      var famaleDances=new Queue();</span><br><span class="line">         // document.write(&quot;1&quot;);</span><br><span class="line">      getDancers(maleDances,famaleDances);</span><br><span class="line">      dance(maleDances,famaleDances);</span><br><span class="line">     </span><br><span class="line">       if(!famaleDances.isEmpty())&#123;</span><br><span class="line">          document.write(famaleDances.front().name+&quot;is waiting&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       if(!maleDances.isEmpty())&#123;</span><br><span class="line">          document.write(maleDances.front().name+&quot;is waiting&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript数据结构3-栈]]></title>
      <url>http://yoursite.com/2016/08/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%843-%E6%A0%88/</url>
      <content type="html"><![CDATA[<p>后进先出（LIFO,last-in-first-out）的数据结构<br>类比：堆叠盘子，只能从上面拿走盘子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; </span><br><span class="line">	&lt;title&gt;栈&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">		function Stack() &#123;</span><br><span class="line">		   this.dataStore = [];</span><br><span class="line">		   this.pos = 0;</span><br><span class="line">		   this.push=push;</span><br><span class="line">		   this.pop=pop;</span><br><span class="line">		   this.peek=peek;</span><br><span class="line">		   this.clear = clear;</span><br><span class="line">		   this.length=length;</span><br><span class="line">		&#125;</span><br><span class="line">        </span><br><span class="line">        function push(element)&#123;</span><br><span class="line">        	this.dataStore[this.pos++]=element;</span><br><span class="line">        &#125;</span><br><span class="line">        function peek()&#123;</span><br><span class="line">        	return this.dataStore[this.top-1];</span><br><span class="line">        &#125;</span><br><span class="line">        function pop()&#123;</span><br><span class="line">        	return this.dataStore[--this.top];</span><br><span class="line">        &#125;</span><br><span class="line">        function clear()&#123;</span><br><span class="line">        	this.top=0;</span><br><span class="line">        &#125;</span><br><span class="line">        function length()&#123;</span><br><span class="line">        	return this.top;</span><br><span class="line">        &#125;</span><br><span class="line">       /************************************************************************/</span><br><span class="line">       	var s=new Stack();</span><br><span class="line">       	s.push(&quot;Tom&quot;);</span><br><span class="line">       	s.push(&quot;Som&quot;);</span><br><span class="line">       	s.push(&quot;Dom&quot;);</span><br><span class="line">       	s.push(&quot;Fom&quot;);</span><br><span class="line">       	// document.write(s.dataStore);</span><br><span class="line">       	console.log(s);</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>例子：<br>十进制转化为二进制，使用栈实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*数制间的相互转换*/</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">mulBase</span>(<span class="params">num,base</span>)</span>&#123;</span><br><span class="line">        	<span class="keyword">var</span> s=<span class="keyword">new</span> Stack();</span><br><span class="line">        	<span class="keyword">do</span>&#123;</span><br><span class="line">        		s.push(num% base);</span><br><span class="line">        		num=<span class="built_in">Math</span>.floor(num /=base);</span><br><span class="line">        	&#125;<span class="keyword">while</span>(num &gt; <span class="number">0</span>);</span><br><span class="line">        	<span class="keyword">var</span> cov=<span class="string">""</span>;</span><br><span class="line">          <span class="built_in">console</span>.log(s.length());</span><br><span class="line">        	<span class="keyword">while</span>(s.length() &gt;<span class="number">0</span>)&#123;</span><br><span class="line">        		cov += s.pop();</span><br><span class="line">        		</span><br><span class="line">        	&#125;</span><br><span class="line">        	<span class="keyword">return</span> cov;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">var</span> num=<span class="number">32</span>;</span><br><span class="line">       <span class="keyword">var</span> newNum=mulBase(<span class="number">32</span>,<span class="number">2</span>);  <span class="comment">//十进制转换为二进制</span></span><br><span class="line">       <span class="built_in">console</span>.log(newNum);</span><br><span class="line">       <span class="built_in">document</span>.write(newNum);</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript数据结构2-列表]]></title>
      <url>http://yoursite.com/2016/08/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842-%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-类型定义"><a href="#1-类型定义" class="headerlink" title="1. 类型定义"></a>1. 类型定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">listSize（属性）         列表的元素个数</span><br><span class="line">pos（ 属性）             列表的当前位置</span><br><span class="line">length（ 属性） 	 	  返回列表中元素的个数</span><br><span class="line">clear（ 方法）  		  清空列表中的所有元素</span><br><span class="line">toString（ 方法）  	  返回列表的字符串形式</span><br><span class="line">getElement（ 方法） 	  返回当前位置的元素</span><br><span class="line">insert（ 方法）  		  在现有元素后插入新元素</span><br><span class="line">append（ 方法） 		  在列表的末尾添加新元素</span><br><span class="line">remove（ 方法） 		  从列表中删除元素</span><br><span class="line">front（ 方法）  		  将列表的当前位置设移动到第一个元素</span><br><span class="line">end（ 方法）  			  将列表的当前位置移动到最后一个元素</span><br><span class="line">prev（方法）  			  将当前位置后移一位</span><br><span class="line">next（ 方法）  	      将当前位置前移一位</span><br><span class="line">currPos（ 方法）  		  返回列表的当前位置</span><br><span class="line">moveTo（方法） 	      将当前位置移动到指定位置</span><br></pre></td></tr></table></figure>
<h2 id="2-实现列表类"><a href="#2-实现列表类" class="headerlink" title="2.实现列表类"></a>2.实现列表类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; </span><br><span class="line">	&lt;title&gt;实现列表类&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">	function List() &#123;</span><br><span class="line">   this.listSize = 0;</span><br><span class="line">   this.pos = 0;</span><br><span class="line">   this.dataStore = [];</span><br><span class="line">   //this.clear = clear;</span><br><span class="line">   this.find = find;</span><br><span class="line">   this.toString = toString;</span><br><span class="line">   //this.insert = insert;</span><br><span class="line">   this.append = append;</span><br><span class="line">   this.remove = remove;</span><br><span class="line">   this.front = front;</span><br><span class="line">   //this.end = end;</span><br><span class="line">  // this.prev = prev;</span><br><span class="line">   //this.next = next;</span><br><span class="line">   this.length = length;</span><br><span class="line">   //this.currPos = currPos;</span><br><span class="line">   //this.moveTo = moveTo;</span><br><span class="line">   this.getElement = getElement;</span><br><span class="line">  // this.length = length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function append(element) &#123;</span><br><span class="line">   this.dataStore[this.listSize++] = element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function find(element) &#123;</span><br><span class="line">   for (var i = 0; i &lt; this.dataStore.length; ++i) &#123;</span><br><span class="line">      if (this.dataStore[i] == element) &#123;</span><br><span class="line">         return i;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function remove(element) &#123;</span><br><span class="line">   var foundAt = this.find(element);</span><br><span class="line">   if (foundAt &gt; -1) &#123;</span><br><span class="line">      this.dataStore.splice(foundAt,1);</span><br><span class="line">      --this.listSize;</span><br><span class="line">      return true;</span><br><span class="line">   &#125;</span><br><span class="line">   return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function toString() &#123;</span><br><span class="line">    return this.dataStore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> function front()&#123;</span><br><span class="line">  	// return this.dataStore[0];</span><br><span class="line">  	//或者</span><br><span class="line">  	 this.pos=0;</span><br><span class="line">  &#125;</span><br><span class="line">function getElement()&#123;</span><br><span class="line">	return this.dataStore[this.pos];</span><br><span class="line">&#125;</span><br><span class="line">var names = new List();</span><br><span class="line">names.append(&quot;Cynthia&quot;);</span><br><span class="line">names.append(&quot;Raymond&quot;);</span><br><span class="line">names.append(&quot;Barbara&quot;);</span><br><span class="line">console.log(names.toString());</span><br><span class="line">names.remove(&quot;Raymond&quot;);</span><br><span class="line">console.log(names.toString());</span><br><span class="line">// console.log(names.front());</span><br><span class="line">names.front();</span><br><span class="line">console.log(names.getElement());</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-实际例子"><a href="#3-实际例子" class="headerlink" title="3.实际例子"></a>3.实际例子</h2><p>从txt文件中读取数据（注意：这种方法只是适合在IE浏览器）<br>文档内容：</p>
<blockquote>
<p>1.sam<br>2.tim<br>3.jom<br>4.dim<br>5.pop<br>6.hello<br>7.ming</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; </span><br><span class="line">	&lt;title&gt;无标题&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  function List()&#123;</span><br><span class="line">   this.listSize = 0;</span><br><span class="line">   this.pos = 0;</span><br><span class="line">   this.dataStore = [];</span><br><span class="line">   //this.clear = clear;</span><br><span class="line">   this.find = find;</span><br><span class="line">   this.toString = toString;</span><br><span class="line">   //this.insert = insert;</span><br><span class="line">   this.append = append;</span><br><span class="line">   this.remove = remove;</span><br><span class="line">   this.front = front;</span><br><span class="line">   this.end = end;</span><br><span class="line">   //this.prev = prev;</span><br><span class="line">   this.next = next;</span><br><span class="line">   this.length = length;</span><br><span class="line">   this.currPos = currPos;</span><br><span class="line">   //this.moveTo = moveTo;</span><br><span class="line">   this.getElement = getElement;</span><br><span class="line">   this.length = length;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function append(element)&#123;</span><br><span class="line">  	this.dataStore[this.listSize++]=element;</span><br><span class="line">  &#125;</span><br><span class="line">  function find(element)&#123;</span><br><span class="line">  	for (var i = 0; i &lt; this.dataStore.length; i++) &#123;</span><br><span class="line">  		if(this.dataStore[i]==element)&#123;</span><br><span class="line">  			return i;</span><br><span class="line">  		&#125;</span><br><span class="line">  	&#125;;</span><br><span class="line">  	return -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function remove(element)&#123;</span><br><span class="line">  	var foundAt=this.find(element);</span><br><span class="line">  	if(foundAt &gt; -1)&#123;</span><br><span class="line">  		this.dataStore.splice(foundAt,1);</span><br><span class="line">  		--this.listSize;</span><br><span class="line">  		return true;</span><br><span class="line">  	&#125;</span><br><span class="line">  	return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function toString()&#123;</span><br><span class="line">  	return this.dataStore;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function front()&#123;</span><br><span class="line">  	// return this.dataStore[0];</span><br><span class="line">  	 this.pos=0;</span><br><span class="line">  &#125;</span><br><span class="line">    function end()&#123;</span><br><span class="line">  	// return this.dataStore[0];</span><br><span class="line">  	 this.pos=this.listSize-1;</span><br><span class="line">  &#125;</span><br><span class="line">  function currPos()&#123;</span><br><span class="line">  	return this.pos;</span><br><span class="line">  &#125;</span><br><span class="line">  function next()&#123;</span><br><span class="line">  	if(this.pos&lt;this.listSize-1)&#123;</span><br><span class="line">  		++this.pos();</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">	function getElement()&#123;</span><br><span class="line">		return this.dataStore[this.pos];</span><br><span class="line">	&#125;</span><br><span class="line">  function createArr()&#123;</span><br><span class="line">  	// var arr=read(file).split(&quot;/n&quot;);</span><br><span class="line">  	//读取文件</span><br><span class="line">  	var s=[],arr=[];</span><br><span class="line">  	  var fso, f1, ts;</span><br><span class="line">      var ForReading = 1;</span><br><span class="line">      var src=&quot;E:\\jsDS\\test.txt&quot;;</span><br><span class="line">      fso = new ActiveXObject(&quot;Scripting.FileSystemObject&quot;);</span><br><span class="line">      ts = fso.OpenTextFile(src,1,true); </span><br><span class="line">      // document.all.mailbdy.value=ts.ReadAll();</span><br><span class="line">      while (!ts.AtEndOfStream) </span><br><span class="line">		&#123; </span><br><span class="line">			str=ts.Readline(); </span><br><span class="line">      	    // s=str.split(&quot;\n&quot;);</span><br><span class="line">      	    s.push(str);</span><br><span class="line">		&#125;  </span><br><span class="line">		/*console.log(&quot;==================&quot;);</span><br><span class="line">		console.log(s);</span><br><span class="line">		console.log(&quot;==================&quot;);*/</span><br><span class="line">  	for (var i = 0; i &lt; s.length; i++) &#123;</span><br><span class="line">  		 arr[i]=s[i].trim();</span><br><span class="line">  	&#125;;</span><br><span class="line">  	return arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function displayList(list)&#123;</span><br><span class="line">  	// for (list.front();list.currPos()&lt;list.length();list.next()) &#123;</span><br><span class="line">  		var lists=[];</span><br><span class="line">  		list.front();</span><br><span class="line">  		while(list.currPos() &lt; list.length)&#123;</span><br><span class="line">  			lists.push(list.getElement());</span><br><span class="line">  			list.next();</span><br><span class="line">  		&#125;</span><br><span class="line">         return lists;</span><br><span class="line">  	</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	  var movies=createArr();</span><br><span class="line">	  var mlist=new List();</span><br><span class="line">	  for (var i = 0; i &lt; movies.length; i++) &#123;</span><br><span class="line">	   console.log(movies[i]);</span><br><span class="line">	  	mlist.append(movies[i]);</span><br><span class="line">	  &#125;;</span><br><span class="line">	  console.log(mlist);</span><br><span class="line">	   //console.log(displayList(mlist));</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript数据结构1-数组]]></title>
      <url>http://yoursite.com/2016/08/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841-%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<p>书籍：</p>
<blockquote>
<p>数据结构与算法javascript描述</p>
</blockquote>
<p>数组比较简单，这里只是简单介绍：</p>
<h2 id="1-使用数组"><a href="#1-使用数组" class="headerlink" title="1.使用数组"></a>1.使用数组</h2><h3 id="1-1-创建数组"><a href="#1-1-创建数组" class="headerlink" title="1.1 创建数组"></a>1.1 创建数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种形式</span></span><br><span class="line"><span class="keyword">var</span> numbers = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//第二种形式</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">7</span>,<span class="number">4</span>,<span class="number">1776</span>];</span><br></pre></td></tr></table></figure>
<p>大多数JavaScript 专家推荐使用[]操作符，和使用Array 的构造函数相比，这种方式被认为效率更高（new创建的对象，会一直存在于内存中）</p>
<h3 id="1-2-读写数组"><a href="#1-2-读写数组" class="headerlink" title="1.2 读写数组"></a>1.2 读写数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; ++i) &#123;</span><br><span class="line">sum += numbers[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-字符串生成数组"><a href="#1-3-字符串生成数组" class="headerlink" title="1.3 字符串生成数组"></a>1.3 字符串生成数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的这一小段程序演示了split() 方法的工作原理：</span></span><br><span class="line"><span class="keyword">var</span> sentence = <span class="string">"the quick brown fox jumped over the lazy dog"</span>;</span><br><span class="line"><span class="keyword">var</span> words = sentence.split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; words.length; ++i) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"word "</span> + i + <span class="string">": "</span> + words[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-4-对数组的整体性操作"><a href="#1-4-对数组的整体性操作" class="headerlink" title="1.4 对数组的整体性操作"></a>1.4 对数组的整体性操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">nums[i] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> samenums = nums;</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">400</span>;</span><br><span class="line"><span class="built_in">console</span>.log(samenums[<span class="number">0</span>]); <span class="comment">// 显示400</span></span><br></pre></td></tr></table></figure>
<p>这种行为被称为<strong>浅复制</strong>，新数组依然指向原来的数组。一个更好的方案是使用<strong>深复制</strong>，将<br>原数组中的每一个元素都复制一份到新数组中。可以写一个深复制函数来做这件事：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length; ++i) &#123;</span><br><span class="line">arr2[i] = arr1[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样，下述代码片段的输出就和我们希望的一样了：</span></span><br><span class="line"><span class="keyword">var</span> nums = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">nums[i] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> samenums = [];</span><br><span class="line">copy(nums, samenums);</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">400</span>;</span><br><span class="line"><span class="built_in">console</span>.log(samenums[<span class="number">0</span>]); <span class="comment">// 显示 1</span></span><br></pre></td></tr></table></figure>
<h2 id="2-存取函数"><a href="#2-存取函数" class="headerlink" title="2. 存取函数"></a>2. 存取函数</h2><h3 id="2-1-查找元素"><a href="#2-1-查找元素" class="headerlink" title="2.1 查找元素"></a>2.1 查找元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"David"</span>, <span class="string">"Cynthia"</span>, <span class="string">"Raymond"</span>, <span class="string">"Clayton"</span>, <span class="string">"Jennifer"</span>];</span><br><span class="line">putstr(<span class="string">"Enter a name to search for: "</span>);</span><br><span class="line"><span class="keyword">var</span> name = readline();</span><br><span class="line"><span class="keyword">var</span> position = names.indexOf(name);</span><br><span class="line"><span class="keyword">if</span> (position &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Found "</span> + name + <span class="string">" at position "</span> + position);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(name + <span class="string">" not found in array."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-两个函数使用"><a href="#2-2-两个函数使用" class="headerlink" title="2.2 两个函数使用"></a>2.2 两个函数使用</h3><p>concat  连接<br>splice 截取<br>join() 和toString()  将数组转化为字符串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cisDept = [<span class="string">"Mike"</span>, <span class="string">"Clayton"</span>, <span class="string">"Terrill"</span>, <span class="string">"Danny"</span>, <span class="string">"Jennifer"</span>];</span><br><span class="line"><span class="keyword">var</span> dmpDept = [<span class="string">"Raymond"</span>, <span class="string">"Cynthia"</span>, <span class="string">"Bryan"</span>];</span><br><span class="line"><span class="keyword">var</span> itDiv = cis.concat(dmp);</span><br><span class="line"><span class="built_in">console</span>.log(itDiv);</span><br><span class="line">itDiv = dmp.concat(cisDept);</span><br><span class="line"><span class="built_in">console</span>.log(itDiv);</span><br><span class="line"><span class="comment">//输出为：</span></span><br><span class="line">Mike,Clayton,Terrill,Danny,Jennifer,Raymond,Cynthia,Bryan</span><br><span class="line">Raymond,Cynthia,Bryan,Mike,Clayton,Terrill,Danny,Jennifer</span><br></pre></td></tr></table></figure>
<h2 id="3-可变函数"><a href="#3-可变函数" class="headerlink" title="3. 可变函数"></a>3. 可变函数</h2><p><strong>简单函数：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push()          末尾增加元素</span><br><span class="line">unshift()       在开头添加元素</span><br><span class="line">pop()           在末尾删除元素</span><br><span class="line">shift()         在开头删除元素</span><br></pre></td></tr></table></figure></p>
<p><strong>从数组中间删除元素：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> newElements = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">nums.splice(<span class="number">3</span>,<span class="number">0</span>,newElements);</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// 1,2,3,4,5,6,7,8,9</span></span><br></pre></td></tr></table></figure>
<p><strong>排序函数：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">nums.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// 5,4,3,2,1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"David"</span>,<span class="string">"Mike"</span>,<span class="string">"Cynthia"</span>,<span class="string">"Clayton"</span>,<span class="string">"Bryan"</span>,<span class="string">"Raymond"</span>];</span><br><span class="line">names.sort();</span><br><span class="line"><span class="built_in">console</span>.log(names); <span class="comment">// Bryan,Clayton,Cynthia,David,Mike,Raymond</span></span><br></pre></td></tr></table></figure>
<p>自定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">100</span>,<span class="number">4</span>,<span class="number">200</span>];</span><br><span class="line">nums.sort(compare);</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// 1,2,3,4,100,200</span></span><br><span class="line"><span class="comment">//sort() 函数使用了compare() 函数对数组按照数字大小进行排序，而不是按照字典顺序。</span></span><br></pre></td></tr></table></figure>
<h2 id="4-迭代器"><a href="#4-迭代器" class="headerlink" title="4.迭代器"></a>4.迭代器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   函数      说明                           是否生成新数组</span><br><span class="line">foreach()    全部遍历                           否    </span><br><span class="line">every()      全部返回true，才返回true            否    </span><br><span class="line">some()       只要一个返回true，就返回true         否    </span><br><span class="line">reduce()     不断调用累加值                      否    </span><br><span class="line">map()        符合条件的，类比foreach()           是    </span><br><span class="line">filter()     返回结果为true的函数                是</span><br></pre></td></tr></table></figure>
<h2 id="5-二维数组和多维数组"><a href="#5-二维数组和多维数组" class="headerlink" title="5.二维数组和多维数组"></a>5.二维数组和多维数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.matrix = <span class="function"><span class="keyword">function</span>(<span class="params">numrows, numcols, initial</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numrows; ++i) &#123;</span><br><span class="line">	<span class="keyword">var</span> columns = [];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; numcols; ++j) &#123;</span><br><span class="line">	columns[j] = initial;</span><br><span class="line">	&#125;</span><br><span class="line">arr[i] = columns;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<h2 id="6-两种特殊的数组"><a href="#6-两种特殊的数组" class="headerlink" title="6.两种特殊的数组"></a>6.两种特殊的数组</h2><p>数组的函数同样适用</p>
<p><strong>对象数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.x = x;</span><br><span class="line">	<span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>对象中的数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">weekTemps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dataStore = [];</span><br><span class="line"><span class="keyword">this</span>.add = add;</span><br><span class="line"><span class="keyword">this</span>.average = average;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">temp</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dataStore.push(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">total += <span class="keyword">this</span>.dataStore[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total / <span class="keyword">this</span>.dataStore.length;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">var</span> thisWeek = <span class="keyword">new</span> weekTemps();</span><br><span class="line">	thisWeek.add(<span class="number">52</span>);</span><br><span class="line">	thisWeek.add(<span class="number">55</span>);</span><br><span class="line">	thisWeek.add(<span class="number">61</span>);</span><br><span class="line">	thisWeek.add(<span class="number">65</span>);</span><br><span class="line">	thisWeek.add(<span class="number">55</span>);</span><br><span class="line">	thisWeek.add(<span class="number">50</span>);</span><br><span class="line">	thisWeek.add(<span class="number">52</span>);</span><br><span class="line">	thisWeek.add(<span class="number">49</span>);</span><br><span class="line"><span class="built_in">console</span>.log(thisWeek.average()); <span class="comment">// 显示54.875</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript数据结构9-排序]]></title>
      <url>http://yoursite.com/2016/08/13/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%849-%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>排序算法</p>
<ol>
<li>基本排序            <ul>
<li>冒泡排序            </li>
<li>选择排序                </li>
<li>插入排序                </li>
</ul>
</li>
<li>高级排序            <ul>
<li>希尔排序            </li>
<li>归并排序            </li>
<li>快速排序            </li>
<li>基数排序    （见【Javascript】四、JS数据结构-队列2-基数排序）                </li>
</ul>
</li>
</ol>
<p><strong>注释：完整例子在最后，可以copy运行。</strong><br><strong>测试数据平台：</strong>                </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组平台</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">CArray</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.dataStore = [];</span><br><span class="line">       <span class="keyword">this</span>.pos = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">this</span>.numElements = numElements;</span><br><span class="line">       <span class="keyword">this</span>.insert = insert;</span><br><span class="line">       <span class="keyword">this</span>.toString = toString;</span><br><span class="line">       <span class="keyword">this</span>.clear = clear;</span><br><span class="line">       <span class="keyword">this</span>.setData = setData;</span><br><span class="line">       <span class="keyword">this</span>.swap = swap;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numElements; ++i) &#123;</span><br><span class="line">           <span class="keyword">this</span>.dataStore[i] = i;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//排序算法</span></span><br><span class="line">       <span class="keyword">this</span>.bubbleSort = bubbleSort; <span class="comment">//冒泡排序</span></span><br><span class="line">       <span class="keyword">this</span>.selectionSort = selectionSort; <span class="comment">//选择排序</span></span><br><span class="line">       <span class="keyword">this</span>.insertionSort = insertionSort; <span class="comment">//插入排序</span></span><br><span class="line">       <span class="keyword">this</span>.shellSort = shellSort; <span class="comment">//希尔排序</span></span><br><span class="line">       <span class="keyword">this</span>.gaps = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">setData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.numElements; ++i) &#123;</span><br><span class="line">           <span class="keyword">this</span>.dataStore[i] = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="keyword">this</span>.numElements + <span class="number">1</span>));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">           <span class="keyword">this</span>.dataStore[i] = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.pos++] = element;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> retstr = <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">           retstr += <span class="keyword">this</span>.dataStore[i] + <span class="string">" "</span>;</span><br><span class="line">           <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp; i % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">               retstr += <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> retstr;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, index1, index2</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> temp = arr[index1];</span><br><span class="line">       arr[index1] = arr[index2];</span><br><span class="line">       arr[index2] = temp;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1-冒泡排序"></a>1-冒泡排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本排序算法</span></span><br><span class="line">    <span class="comment">//1-冒泡排序  时间复杂度 n2</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> numElements = <span class="keyword">this</span>.dataStore.length;</span><br><span class="line">        <span class="keyword">var</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = numElements; i &gt;= <span class="number">2</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.dataStore[j] &gt; <span class="keyword">this</span>.dataStore[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(<span class="keyword">this</span>.dataStore, j, j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bubbleSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// var numElements = 10;</span></span><br><span class="line">        <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;冒泡排序过程：【最大的先冒出来排在最后一位】&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        myNums.bubbleSort();</span><br><span class="line">        <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> time = stop - start;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">        <span class="comment">//document.write(myNums.toString());</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2-选择排序"></a>2-选择排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2-选择排序</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> min, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="keyword">this</span>.dataStore.length - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt;= <span class="keyword">this</span>.dataStore.length - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.dataStore[j] &lt; <span class="keyword">this</span>.dataStore[min]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(<span class="keyword">this</span>.dataStore, i, min);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">selectionSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//var numElements = 10;</span></span><br><span class="line">        <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;选择排序过程：【最小的选择出来放在第一位】&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        myNums.selectionSort();</span><br><span class="line">        <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> time = stop - start;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">        <span class="comment">//document.write(myNums.toString());</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3-插入排序"></a>3-插入排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3-插入排序</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> temp, j;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="keyword">this</span>.dataStore.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">           temp = <span class="keyword">this</span>.dataStore[i];</span><br><span class="line">           j = i; <span class="comment">//j=1</span></span><br><span class="line">           <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; (<span class="keyword">this</span>.dataStore[j - <span class="number">1</span>] &gt; temp)) &#123;</span><br><span class="line">               <span class="keyword">this</span>.dataStore[j] = <span class="keyword">this</span>.dataStore[j - <span class="number">1</span>];</span><br><span class="line">               --j;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">this</span>.dataStore[j] = temp;</span><br><span class="line">           <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">           <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">insertionSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">       <span class="comment">//var numElements = 10;</span></span><br><span class="line">       <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">       myNums.setData();</span><br><span class="line">       <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">       <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;插入排序过程：【从首位开始一个一个插入比较】&lt;br/&gt;'</span>);</span><br><span class="line">       <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">       myNums.insertionSort();</span><br><span class="line">       <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">       <span class="keyword">var</span> time = stop - start;</span><br><span class="line">       <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4-希尔排序"></a>4-希尔排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高级排序算法</span></span><br><span class="line">    <span class="comment">//4-shell排序</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//gaps的长度，分为三大步</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> g = <span class="number">0</span>; g &lt; <span class="keyword">this</span>.gaps.length; ++g) &#123; <span class="comment">//3层 </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">this</span>.gaps[g]; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = <span class="keyword">this</span>.dataStore[i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &gt;= <span class="keyword">this</span>.gaps[g] &amp;&amp; <span class="keyword">this</span>.dataStore[j - <span class="keyword">this</span>.gaps[g]] &gt; temp; j -= <span class="keyword">this</span>.gaps[g]) &#123; <span class="comment">//第一次循环:j=5 如果第1个数【序号0】 &gt; 第6个数【temp序号5】</span></span><br><span class="line">                    <span class="keyword">this</span>.dataStore[j] = <span class="keyword">this</span>.dataStore[j - <span class="keyword">this</span>.gaps[g]]; <span class="comment">//第一次循环j=5  那么第6个数【序号5】 = 第1个数【序号0】</span></span><br><span class="line">                    <span class="comment">//小的排在前面</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.dataStore[j] = temp;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shellSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;希尔排序过程：&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        myNums.shellSort();</span><br><span class="line">        <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> time = stop - start;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'排序结果是:&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5-快速排序"></a>5-快速排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5-快速排序</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">qSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> [];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> left = [];</span><br><span class="line">       <span class="keyword">var</span> right = [];</span><br><span class="line">       <span class="keyword">var</span> pivot = arr[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">               left.push(arr[i]);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               right.push(arr[i]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> qSort(left).concat(pivot, qSort(right));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">qSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> a = [];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numElements; i++) &#123;</span><br><span class="line">           a[i] = <span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * numElements) + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">document</span>.write(a);</span><br><span class="line">       <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">       <span class="keyword">var</span> start= <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">       <span class="built_in">document</span>.write(qSort(a));</span><br><span class="line">       <span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;需要时间是："</span>);</span><br><span class="line">       <span class="keyword">var</span> stop= <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">       <span class="keyword">var</span> time=stop-start;</span><br><span class="line">       <span class="built_in">document</span>.write(time);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整例子："><a href="#完整例子：" class="headerlink" title="完整例子："></a><strong>完整例子：</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta charset="utf-8"&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;排序算法总结&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type="button" value="冒泡排序过程查看" onclick="bubbleSortTest(10)"&gt;</span><br><span class="line">    &lt;input type="button" value="选择排序过程查看" onclick="selectionSortTest(10)"&gt;</span><br><span class="line">    &lt;input type="button" value="插入排序过程查看" onclick="insertionSortTest(10)"&gt;</span><br><span class="line">    &lt;input type="button" value="希尔排序过程查看" onclick="shellSortTest(10)"&gt;</span><br><span class="line">    &lt;input type="button" value="快速排序过程查看" onclick="qSortTest(10)"&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;p&gt;查看执行函数，建议先删除排序函数中的document.write过程打印,即是:&lt;/p&gt;</span><br><span class="line">    &lt;input type="button" value="冒泡排序执行时间" onclick="bubbleSortTest(10000)"&gt;</span><br><span class="line">    &lt;input type="button" value="选择排序执行时间" onclick="selectionSortTest(10000)"&gt;</span><br><span class="line">    &lt;input type="button" value="插入排序执行时间" onclick="insertionSortTest(10000)"&gt;</span><br><span class="line">    &lt;input type="button" value="希尔排序执行时间" onclick="shellSortTest(10000)"&gt;</span><br><span class="line">    &lt;input type="button" value="快速排序执行时间" onclick="qSortTest(10000)"&gt;</span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">    //===========================================</span><br><span class="line">    //数组平台</span><br><span class="line">    function CArray(numElements) &#123;</span><br><span class="line">        this.dataStore = [];</span><br><span class="line">        this.pos = 0;</span><br><span class="line">        this.numElements = numElements;</span><br><span class="line">        this.insert = insert;</span><br><span class="line">        this.toString = toString;</span><br><span class="line">        this.clear = clear;</span><br><span class="line">        this.setData = setData;</span><br><span class="line">        this.swap = swap;</span><br><span class="line">        for (var i = 0; i &lt; numElements; ++i) &#123;</span><br><span class="line">            this.dataStore[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //排序算法</span><br><span class="line">        this.bubbleSort = bubbleSort; //冒泡排序</span><br><span class="line">        this.selectionSort = selectionSort; //选择排序</span><br><span class="line">        this.insertionSort = insertionSort; //插入排序</span><br><span class="line">        this.shellSort = shellSort; //希尔排序</span><br><span class="line">        this.gaps = [5, 3, 1];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setData() &#123;</span><br><span class="line">        for (var i = 0; i &lt; this.numElements; ++i) &#123;</span><br><span class="line">            this.dataStore[i] = Math.floor(Math.random() * (this.numElements + 1));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function clear() &#123;</span><br><span class="line">        for (var i = 0; i &lt; this.dataStore.length; ++i) &#123;</span><br><span class="line">            this.dataStore[i] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function insert(element) &#123;</span><br><span class="line">        this.dataStore[this.pos++] = element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function toString() &#123;</span><br><span class="line">        var retstr = "";</span><br><span class="line">        for (var i = 0; i &lt; this.dataStore.length; ++i) &#123;</span><br><span class="line">            retstr += this.dataStore[i] + " ";</span><br><span class="line">            if (i &gt; 0 &amp; i % 10 == 0) &#123;</span><br><span class="line">                retstr += "&lt;br/&gt;";</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return retstr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function swap(arr, index1, index2) &#123;</span><br><span class="line">        var temp = arr[index1];</span><br><span class="line">        arr[index1] = arr[index2];</span><br><span class="line">        arr[index2] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    //使用测试平台类</span><br><span class="line"></span><br><span class="line">    //=================================================================</span><br><span class="line">    //基本排序算法</span><br><span class="line">    //1-冒泡排序  时间复杂度 n2</span><br><span class="line">    function bubbleSort() &#123;</span><br><span class="line">        var numElements = this.dataStore.length;</span><br><span class="line">        var temp;</span><br><span class="line">        for (var i = numElements; i &gt;= 2; --i) &#123;</span><br><span class="line">            for (var j = 0; j &lt;= i - 1; ++j) &#123;</span><br><span class="line">                if (this.dataStore[j] &gt; this.dataStore[j + 1]) &#123;</span><br><span class="line">                    swap(this.dataStore, j, j + 1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            document.write(this.toString());</span><br><span class="line">            document.write('&lt;br/&gt;');</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bubbleSortTest(numElements) &#123;</span><br><span class="line">        // var numElements = 10;</span><br><span class="line">        var myNums = new CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        document.write(myNums.toString());</span><br><span class="line">        document.write('&lt;br/&gt;冒泡排序过程：【最大的先冒出来排在最后一位】&lt;br/&gt;');</span><br><span class="line">        var start = new Date().getTime();</span><br><span class="line">        myNums.bubbleSort();</span><br><span class="line">        var stop = new Date().getTime();</span><br><span class="line">        var time = stop - start;</span><br><span class="line">        document.write("所需要的时间是：" + time);</span><br><span class="line">        //document.write(myNums.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    //2-选择排序</span><br><span class="line">    function selectionSort() &#123;</span><br><span class="line">        var min, temp;</span><br><span class="line">        for (var i = 0; i &lt;= this.dataStore.length - 2; ++i) &#123;</span><br><span class="line">            min = i;</span><br><span class="line">            for (var j = i + 1; j &lt;= this.dataStore.length - 1; ++j) &#123;</span><br><span class="line">                if (this.dataStore[j] &lt; this.dataStore[min]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(this.dataStore, i, min);</span><br><span class="line">            document.write(this.toString());</span><br><span class="line">            document.write('&lt;br/&gt;');</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function selectionSortTest(numElements) &#123;</span><br><span class="line">        //var numElements = 10;</span><br><span class="line">        var myNums = new CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        document.write(myNums.toString());</span><br><span class="line">        document.write('&lt;br/&gt;选择排序过程：【最小的选择出来放在第一位】&lt;br/&gt;');</span><br><span class="line">        var start = new Date().getTime();</span><br><span class="line">        myNums.selectionSort();</span><br><span class="line">        var stop = new Date().getTime();</span><br><span class="line">        var time = stop - start;</span><br><span class="line">        document.write("所需要的时间是：" + time);</span><br><span class="line">        //document.write(myNums.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //3-插入排序</span><br><span class="line">    function insertionSort() &#123;</span><br><span class="line">        var temp, j;</span><br><span class="line">        for (var i = 1; i &lt;= this.dataStore.length - 1; ++i) &#123;</span><br><span class="line">            temp = this.dataStore[i];</span><br><span class="line">            j = i; //j=1</span><br><span class="line">            while (j &gt; 0 &amp;&amp; (this.dataStore[j - 1] &gt; temp)) &#123;</span><br><span class="line">                this.dataStore[j] = this.dataStore[j - 1];</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            this.dataStore[j] = temp;</span><br><span class="line">            document.write(this.toString());</span><br><span class="line">            document.write('&lt;br/&gt;');</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function insertionSortTest(numElements) &#123;</span><br><span class="line">        //var numElements = 10;</span><br><span class="line">        var myNums = new CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        document.write(myNums.toString());</span><br><span class="line">        document.write('&lt;br/&gt;插入排序过程：【从首位开始一个一个插入比较】&lt;br/&gt;');</span><br><span class="line">        var start = new Date().getTime();</span><br><span class="line">        myNums.insertionSort();</span><br><span class="line">        var stop = new Date().getTime();</span><br><span class="line">        var time = stop - start;</span><br><span class="line">        document.write("所需要的时间是：" + time);</span><br><span class="line">    &#125;</span><br><span class="line">    //高级排序算法</span><br><span class="line">    //4-shell排序</span><br><span class="line">    function shellSort() &#123;</span><br><span class="line">        //gaps的长度，分为三大步</span><br><span class="line">        for (var g = 0; g &lt; this.gaps.length; ++g) &#123; //3层 </span><br><span class="line">            for (var i = this.gaps[g]; i &lt; this.dataStore.length; ++i) &#123;</span><br><span class="line">                var temp = this.dataStore[i];</span><br><span class="line">                for (var j = i; j &gt;= this.gaps[g] &amp;&amp; this.dataStore[j - this.gaps[g]] &gt; temp; j -= this.gaps[g]) &#123; //第一次循环:j=5 如果第1个数【序号0】 &gt; 第6个数【temp序号5】</span><br><span class="line">                    this.dataStore[j] = this.dataStore[j - this.gaps[g]]; //第一次循环j=5  那么第6个数【序号5】 = 第1个数【序号0】</span><br><span class="line">                    //小的排在前面</span><br><span class="line">                &#125;</span><br><span class="line">                this.dataStore[j] = temp;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            document.write(this.toString());</span><br><span class="line">            document.write('&lt;br/&gt;');</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function shellSortTest(numElements) &#123;</span><br><span class="line">        var myNums = new CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        document.write(myNums.toString());</span><br><span class="line">        document.write('&lt;br/&gt;希尔排序过程：&lt;br/&gt;');</span><br><span class="line">        var start = new Date().getTime();</span><br><span class="line">        myNums.shellSort();</span><br><span class="line">        var stop = new Date().getTime();</span><br><span class="line">        var time = stop - start;</span><br><span class="line">        document.write('排序结果是:&lt;br/&gt;');</span><br><span class="line">        document.write(myNums.toString());</span><br><span class="line">        document.write('&lt;br/&gt;');</span><br><span class="line">        document.write("所需要的时间是：" + time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //5-快速排序</span><br><span class="line">    function qSort(arr) &#123;</span><br><span class="line">        if (arr.length == 0) &#123;</span><br><span class="line">            return [];</span><br><span class="line">        &#125;</span><br><span class="line">        var left = [];</span><br><span class="line">        var right = [];</span><br><span class="line">        var pivot = arr[0];</span><br><span class="line">        for (var i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">            if (arr[i] &lt; pivot) &#123;</span><br><span class="line">                left.push(arr[i]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                right.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return qSort(left).concat(pivot, qSort(right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function qSortTest(numElements) &#123;</span><br><span class="line">        var a = [];</span><br><span class="line">        for (var i = 0; i &lt; numElements; i++) &#123;</span><br><span class="line">            a[i] = Math.floor((Math.random() * numElements) + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        document.write(a);</span><br><span class="line">        document.write('&lt;br/&gt;');</span><br><span class="line">        var start= new Date().getTime();</span><br><span class="line">        document.write(qSort(a));</span><br><span class="line">        document.write("&lt;br/&gt;需要时间是：");</span><br><span class="line">        var stop= new Date().getTime();</span><br><span class="line">        var time=stop-start;</span><br><span class="line">        document.write(time);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sublime-快捷键]]></title>
      <url>http://yoursite.com/2016/08/13/sublime-%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h1 id="选择类"><a href="#选择类" class="headerlink" title="选择类"></a>选择类</h1><p>Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。</p>
<p>Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。</p>
<p>Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。</p>
<p>Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</p>
<p>Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。</p>
<p>Ctrl+M 光标移动至括号内结束或开始的位置。</p>
<p>Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。</p>
<p>Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。</p>
<p>Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。</p>
<p>Ctrl+Shift+] 选中代码，按下快捷键，展开代码。</p>
<p>Ctrl+K+0 展开所有折叠代码。</p>
<p>Ctrl+← 向左单位性地移动光标，快速移动光标。</p>
<p>Ctrl+→ 向右单位性地移动光标，快速移动光标。</p>
<p>shift+↑ 向上选中多行。</p>
<p>shift+↓ 向下选中多行。</p>
<p>Shift+← 向左选中文本。</p>
<p>Shift+→ 向右选中文本。</p>
<p>Ctrl+Shift+← 向左单位性地选中文本。</p>
<p>Ctrl+Shift+→ 向右单位性地选中文本。</p>
<p>Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。</p>
<p>Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。</p>
<p>Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。</p>
<p>Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。</p>
<h1 id="编辑类"><a href="#编辑类" class="headerlink" title="编辑类"></a>编辑类</h1><p>Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。</p>
<p>Ctrl+Shift+D 复制光标所在整行，插入到下一行。</p>
<p>Tab 向右缩进。</p>
<p>Shift+Tab 向左缩进。</p>
<p>Ctrl+K+K 从光标处开始删除代码至行尾。</p>
<p>Ctrl+Shift+K 删除整行。</p>
<p>Ctrl+/ 注释单行。</p>
<p>Ctrl+Shift+/ 注释多行。</p>
<p>Ctrl+K+U 转换大写。</p>
<p>Ctrl+K+L 转换小写。</p>
<p>Ctrl+Z 撤销。</p>
<p>Ctrl+Y 恢复撤销。</p>
<p>Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。</p>
<p>Ctrl+F2 设置书签</p>
<p>Ctrl+T 左右字母互换。</p>
<p>F6 单词检测拼写</p>
<h1 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h1><p>Ctrl+F 打开底部搜索框，查找关键字。</p>
<p>Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。</p>
<p>Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。</p>
<p>Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。</p>
<p>Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。</p>
<p>Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。</p>
<p>Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。</p>
<p>Esc 退出光标多行选择，退出搜索框，命令框等。</p>
<h1 id="显示类"><a href="#显示类" class="headerlink" title="显示类"></a>显示类</h1><p>Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。</p>
<p>Ctrl+PageDown 向左切换当前窗口的标签页。</p>
<p>Ctrl+PageUp 向右切换当前窗口的标签页。</p>
<p>Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）</p>
<p>Alt+Shift+2 左右分屏-2列</p>
<p>Alt+Shift+3 左右分屏-3列</p>
<p>Alt+Shift+4 左右分屏-4列</p>
<p>Alt+Shift+5 等分4屏</p>
<p>Alt+Shift+8 垂直分屏-2屏</p>
<p>Alt+Shift+9 垂直分屏-3屏</p>
<p>Ctrl+K+B 开启/关闭侧边栏。</p>
<p>F11 全屏模式</p>
<p>Shift+F11 免打扰模式</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP/2 的优势]]></title>
      <url>http://yoursite.com/2016/08/13/http2%20%E7%9A%84%E4%BC%98%E5%8A%BF/</url>
      <content type="html"><![CDATA[<p>相比 HTTP/1.x，HTTP/2 在底层传输做了很大的改动和优化：</p>
<ol>
<li>HTTP/2 采用二进制格式传输数据，而非 HTTP/1.x 的文本格式。二进制格式在协议的解析和优化扩展上带来更多的优势和可能。</li>
<li>HTTP/2 对消息头采用 HPACK 进行压缩传输，能够节省消息头占用的网络的流量。而 HTTP/1.x 每次请求，都会携带大量冗余头信息，浪费了很多带宽资源。头压缩能够很好的解决该问题。</li>
<li>多路复用，直白的说就是所有的请求都是通过一个 TCP 连接并发完成。HTTP/1.x 虽然能利用一个连接完成多次请求，但是多个请求之间是有先后顺序的，后面发送的请求必须等待上一个请求返回才能发送响应。这会很容易导致后面的请求被阻塞，而 HTTP/2 做到了真正的并发请求。同时， 流还支持优先级和流量控制。</li>
<li>Server Push：服务端能够更快的把资源推送给客户端。例如服务端可以主动把 JS 和 CSS 文件推送给客户端，而不需要客户端解析 HTML 再发送这些请求。当客户端需要的时候，它已经在客户端了。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[上传下载csv数据]]></title>
      <url>http://yoursite.com/2016/08/12/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BDcsv%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h1 id="一、上传csv数据"><a href="#一、上传csv数据" class="headerlink" title="一、上传csv数据"></a>一、上传csv数据</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(fileid).files[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(file)&#123;</span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.readAsText(file,<span class="string">'GB2312'</span>);</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//console.log(f);</span></span><br><span class="line">        <span class="keyword">var</span> datatmp = <span class="keyword">this</span>.result;</span><br><span class="line">        <span class="keyword">var</span> tmparr = datatmp.split(<span class="regexp">/\r\n/g</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、下载csv数据"><a href="#二、下载csv数据" class="headerlink" title="二、下载csv数据"></a>二、下载csv数据</h1><p>方法一：datatable自带功能</p>
<p>引入文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"common/csslib/dataTables.tableTools.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'common/jslib/publib/dataTables.tableTools.min.js'</span> </span><br><span class="line"><span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"oTableTools"</span>: &#123;</span><br><span class="line">    <span class="string">"sSwfPath"</span>: <span class="string">"/slprj/common/csslib/copy_csv_xls.swf"</span>,</span><br><span class="line">    <span class="string">"aButtons"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="string">"sExtends"</span>: <span class="string">"csv"</span>,</span><br><span class="line">        <span class="string">"sButtonText"</span>: <span class="string">"导出数据"</span>,</span><br><span class="line">        <span class="string">"sCharSet"</span>: <span class="string">"utf8"</span>,</span><br><span class="line">        <span class="string">"bBomInc"</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p>方法二：利用<code>&lt;a&gt;</code>标签下载<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">a.id=<span class="string">'downloadFtsetBtn'</span>;</span><br><span class="line">a.style.display=<span class="string">'none'</span>;</span><br><span class="line">a.target=<span class="string">'_blank'</span>;  </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line">a.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    _a = <span class="built_in">document</span>.getElementById(<span class="string">'downloadFtsetBtn'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(_a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([exportsda], &#123;type: <span class="string">'text'</span>&#125;); </span><br><span class="line"><span class="keyword">var</span> URL=<span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line">a.href=URL.createObjectURL(blob);</span><br><span class="line">a.download = <span class="string">'aa.csv'</span>;  </span><br><span class="line">a.click();</span><br></pre></td></tr></table></figure></p>
<p>方法三：利用<code>&lt;iframe&gt;</code>标签下载<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elemIF = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);   </span><br><span class="line">elemIF.src = req;   </span><br><span class="line">elemIF.style.display = <span class="string">"none"</span>;   </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(elemIF);</span><br></pre></td></tr></table></figure></p>
<p>方法四：window.open<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(url);<span class="comment">//但是该方法在火狐上没有效果的，在IE浏览器上是可以的。</span></span><br></pre></td></tr></table></figure></p>
<p>方法五：window.location<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href=<span class="string">"htpp://www.baidu.com/test.rar"</span>;<span class="comment">//火狐有些版本是不支持的。</span></span><br></pre></td></tr></table></figure></p>
<p>为了解决这个问题，我们可以换做另外一种方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location=<span class="string">"htpp://www.baidu.com/test.rar"</span>;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[短信服务]]></title>
      <url>http://yoursite.com/2016/08/12/%E9%98%BF%E9%87%8C%E5%A4%A7%E4%BA%8E%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h1 id="方法一：阿里大于API，需要企业账号登录。"><a href="#方法一：阿里大于API，需要企业账号登录。" class="headerlink" title="方法一：阿里大于API，需要企业账号登录。"></a>方法一：<a href="http://www.alidayu.com/" target="_blank" rel="external">阿里大于API</a>，需要企业账号登录。</h1><p>alibaba.aliqin.ta.sms.num.send (短信发送)</p>
<p>第一步：注册账号。<br><img src="http://i4.piimg.com/567571/cebe1364637a5706.png" alt=""></p>
<p>第二步：创建短信签名和短信模板。<br><img src="http://i4.piimg.com/567571/12bea83b47e59536.png" alt=""></p>
<p>第三步：创建应用。<br><img src="http://i4.piimg.com/567571/bc212d014bf85e91.png" alt=""></p>
<p>第四步：下载SDK。<br><img src="http://i4.piimg.com/567571/63dc8583d27568f9.png" alt=""></p>
<p>第五步：调用接口。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">"TopSdk.php"</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">"top/TopClient.php"</span>;</span><br><span class="line">date_default_timezone_set(<span class="string">'Asia/Shanghai'</span>); </span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> TopClient;</span><br><span class="line">$c-&gt;appkey = <span class="string">"23270934"</span>;</span><br><span class="line">$c-&gt;secretKey = <span class="string">"******"</span>;</span><br><span class="line">$req = <span class="keyword">new</span> AlibabaAliqinFcSmsNumSendRequest;</span><br><span class="line">$req-&gt;setExtend(<span class="string">"123"</span>);</span><br><span class="line">$req-&gt;setSmsType(<span class="string">"normal"</span>);</span><br><span class="line">$req-&gt;setSmsFreeSignName(<span class="string">"三林镇建设项目"</span>);</span><br><span class="line">$req-&gt;setSmsParam(<span class="string">'&#123;"product":"xiaoming","code":"987"&#125;'</span>);</span><br><span class="line">$req-&gt;setRecNum(<span class="string">"13262208625"</span>);</span><br><span class="line">$req-&gt;setSmsTemplateCode(<span class="string">"SMS_2570065"</span>);</span><br><span class="line">$resp = $c-&gt;execute($req);</span><br></pre></td></tr></table></figure></p>
<h1 id="方法二：阿里百川API。"><a href="#方法二：阿里百川API。" class="headerlink" title="方法二：阿里百川API。"></a>方法二：阿里百川API。</h1><p><a href="http://baichuan.taobao.com/doc2/detail?spm=0.0.0.0.o6kDjh&amp;treeId=42&amp;articleId=103193&amp;docType=1" target="_blank" rel="external">http://baichuan.taobao.com/doc2/detail?spm=0.0.0.0.o6kDjh&amp;treeId=42&amp;articleId=103193&amp;docType=1</a><br>taobao.open.sms.sendmsg (发送短信)<br><img src="http://i4.piimg.com/567571/39428cbd71895ec7.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">"TopSdk.php"</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">"top/TopClient.php"</span>;</span><br><span class="line">date_default_timezone_set(<span class="string">'Asia/Shanghai'</span>); </span><br><span class="line"></span><br><span class="line">$callback = <span class="keyword">isset</span>($_GET[<span class="string">'callback'</span>]) ? trim($_GET[<span class="string">'callback'</span>]) : <span class="string">''</span>;</span><br><span class="line">$name = <span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]) ? trim($_GET[<span class="string">'name'</span>]) : <span class="string">'mm'</span>;</span><br><span class="line">$con = <span class="keyword">isset</span>($_GET[<span class="string">'con'</span>]) ? trim($_GET[<span class="string">'con'</span>]) : <span class="string">'wuuu'</span>;</span><br><span class="line">$mobile_num = <span class="keyword">isset</span>($_GET[<span class="string">'mobile_num'</span>]) ? trim($_GET[<span class="string">'mobile_num'</span>]) : <span class="string">'13262208625'</span>;</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> TopClient;</span><br><span class="line">$c-&gt;appkey = <span class="string">"23270857"</span>;</span><br><span class="line">$c-&gt;secretKey = <span class="string">"******"</span>;</span><br><span class="line">$req = <span class="keyword">new</span> OpenSmsSendmsgRequest;</span><br><span class="line">$send_message_request = <span class="keyword">new</span> SendMessageRequest;</span><br><span class="line">$send_message_request-&gt;template_id=<span class="string">"879"</span>;</span><br><span class="line">$send_message_request-&gt;signature_id=<span class="string">"795"</span>;</span><br><span class="line">$send_message_request-&gt;context=json_decode(<span class="string">"&#123;\"name\":\""</span>.$name.<span class="string">"\",\"con\":\""</span>.$con.<span class="string">"\"&#125;"</span>);</span><br><span class="line">$send_message_request-&gt;mobile=$mobile_num;</span><br><span class="line"></span><br><span class="line">$req-&gt;setSendMessageRequest(json_encode($send_message_request));</span><br><span class="line">$resp = $c-&gt;execute($req);</span><br><span class="line"></span><br><span class="line">$date = <span class="string">'success'</span>;</span><br><span class="line">$tmp= json_encode($date); <span class="comment">//json 数据</span></span><br><span class="line"><span class="keyword">echo</span> $callback . <span class="string">'('</span> . $tmp .<span class="string">')'</span>;  <span class="comment">//返回格式，必需</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[后台php实现数据实时抓取]]></title>
      <url>http://yoursite.com/2016/08/12/%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8F%96/</url>
      <content type="html"><![CDATA[<h1 id="1、设置参数"><a href="#1、设置参数" class="headerlink" title="1、设置参数"></a>1、设置参数</h1><p>date_default_timezone_set(“Asia/Shanghai”); //使得程序能够定时运行；<br>ignore_user_abort();  //即使Client断开(如关掉浏览器)，PHP脚本也可以继续执行；<br>set_time_limit(0);  //执行时间为无限制，php默认执行时间是30秒，可以让程序无限制的执行下去；<br>$interval=60*60;  // 每隔一小时运行一次</p>
<h1 id="2、定时数据抓取"><a href="#2、定时数据抓取" class="headerlink" title="2、定时数据抓取"></a>2、定时数据抓取</h1><p>在无限循环语句中，首先利用函数从url获取数据,然后将数据插入到数据库中（本文选用mysql数据库），最后使用sleep()函数设置等待一段时间后再进入下一次循环。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**********利用函数从url获取数据***************/</span></span><br><span class="line">    $json = GetCurl(<span class="string">"http://www.pm25.in/api/querys/&lt;all_cities class="</span>  <span class="string">"&gt;&lt;/all_cities&gt;json?token=jzxqS2qpsYU3bRhkEjey"</span>); <span class="comment">//json数据文件</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**********把上述数据插入数据库****************/</span></span><br><span class="line">    $con = mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">""</span>);<span class="comment">//连接数据库</span></span><br><span class="line">    set_time_limit(<span class="number">0</span>);<span class="comment">//设置永远不超时</span></span><br><span class="line">    mysql_select_db(<span class="string">"airquality_db"</span>,$con);<span class="comment">//选择数据库</span></span><br><span class="line">    ···</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**********按设置的时间等待一小时循环执行****************/</span></span><br><span class="line">    sleep($interval);  </span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>从url中获取数据的函数如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetCurl</span>(<span class="params">$url</span>)</span>&#123;</span><br><span class="line">        set_time_limit(<span class="number">0</span>);<span class="comment">//设置永远不超时</span></span><br><span class="line">        $curl = curl_init();</span><br><span class="line">        curl_setopt($curl,CURLOPT_RETURNTRANSFER,<span class="number">1</span>);<span class="comment">//获取url数据作为变量存储，设置为1或true</span></span><br><span class="line">        curl_setopt($curl,CURLOPT_URL, $url);</span><br><span class="line">        <span class="comment">//模拟用户使用的浏览器，在HTTP请求中包含一个"user-agent"头的字符串。</span></span><br><span class="line">        curl_setopt($curl,CURLOPT_USERAGENT, $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]);</span><br><span class="line">        $resp = curl_exec($curl);<span class="comment">//运行curl，请求网页</span></span><br><span class="line">        $json = json_decode($resp,<span class="literal">true</span>);</span><br><span class="line">        curl_close($curl);<span class="comment">//关闭curl请求</span></span><br><span class="line">        <span class="keyword">return</span> $json;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="3、数据抓取的网站"><a href="#3、数据抓取的网站" class="headerlink" title="3、数据抓取的网站"></a>3、数据抓取的网站</h1><h2 id="空气质量"><a href="#空气质量" class="headerlink" title="空气质量"></a>空气质量</h2><p><a href="http://www.pm25.in/api/querys/all_cities.json?token=jzxqS2qpsYU3bRhkEjey" target="_blank" rel="external">http://www.pm25.in/api/querys/all_cities.json?token=jzxqS2qpsYU3bRhkEjey</a></p>
<h2 id="气象"><a href="#气象" class="headerlink" title="气象"></a>气象</h2><p><a href="http://api.openweathermap.org/data/2.5/group?id=1796236,1799397,1808926,1799962,1790645&amp;units=metric&amp;APPID=94506fa9256f37bd13eae4126beb7d8d&amp;lang=zh_cn" target="_blank" rel="external">http://api.openweathermap.org/data/2.5/group?id=1796236,1799397,1808926,1799962,1790645&amp;units=metric&amp;APPID=94506fa9256f37bd13eae4126beb7d8d&amp;lang=zh_cn</a><br>Id代表城市，APPID代表密钥，lang代表语言。<br>更新时间好像是我自己测的，我让它每隔半小时获取一次，然后看到数据大约是一小时一次。</p>
<h1 id="4、存在问题"><a href="#4、存在问题" class="headerlink" title="4、存在问题"></a>4、存在问题</h1><p>数据抓取过程中发生断开连接现象(即循环过程中断)，需要重新运行PHP文件进行抓取。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Polymer介绍]]></title>
      <url>http://yoursite.com/2016/08/12/Polymer%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h1 id="1-Polymer简介"><a href="#1-Polymer简介" class="headerlink" title="1 Polymer简介"></a>1 Polymer简介</h1><p>Polymer(聚合物，设计理念：材料学设计规范)<br>Polymer是google开发的web components方式的前端UI控件库</p>
<p><strong>历史</strong><br>2013年google I/O大会发布0.5开发者预览版<br>2015年 google I/O大会发布1.0版本<br>目前已更新到1.2.3版本</p>
<p><strong>web components 是什么？</strong><br>web组件就是web的一个一个元素标签， 如input标签，img标签，video标签等等。 web componts的概念就是把所有可重用的东西封装成元素组件， 下次要用，自己使用自己写好的标签即可。 </p>
<p>polymer给大家提供了封装自定义标签的方法，它自己也有很多已经封装的标签<br>polymer的理念是一切功能皆元素， 即使是ajax， 也是元素，core-ajax标签可以发起ajax请求， 文档地址：<a href="http://www.polymer-project.org/docs/elements/core-elements.html#core-ajax" target="_blank" rel="external">http://www.polymer-project.org/docs/elements/core-elements.html#core-ajax</a><br>polymer已经有了一个组件库，里面有很多已经封装好的组件。</p>
<h1 id="2-快速实践"><a href="#2-快速实践" class="headerlink" title="2 快速实践"></a>2 快速实践</h1><h3 id="新建newTag-html文件"><a href="#新建newTag-html文件" class="headerlink" title="新建newTag.html文件"></a>新建newTag.html文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"polymer/polymer.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dom-module</span> <span class="attr">id</span>=<span class="string">"element-name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><br><span class="line">      /* 组件元素CSS样式 */</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">!—该组件的本地DOM--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">on-click</span>=<span class="string">”handleClick”</span>&gt;</span>&#123;&#123;greeting&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">!—在本地DOM上绑定数据--</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dom-module</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span><br><span class="line">// 注册元素</span><br><span class="line">Polymer(&#123;</span><br><span class="line">  is: "element-name",//自定义元素的名称必选用连接符</span><br><span class="line"></span><br><span class="line">  // 给元素添加属性和方法</span><br><span class="line">  properties: &#123;</span><br><span class="line">    // 为元素声明公共api</span><br><span class="line">    greeting: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      value: "Hello!"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleClick: function(event) &#123;</span><br><span class="line">        /*事件逻辑*/</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><p>1、如果使用该组件，则在html文件中导入即可<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"newTag.html"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>2、声明周期的回调函数</p>
<ul>
<li>ceated</li>
<li>attached</li>
<li>detached</li>
<li>attributeChanged</li>
</ul>
<p>3、本地DOM的初始化顺序</p>
<ul>
<li>created callback</li>
<li>local DOM initialized</li>
<li>ready callback</li>
<li>factoryImpl callback</li>
<li>attached callback</li>
</ul>
<p>4、通过dom-module定义一个本地DOM，及自定义标签，该标签的id为该自定义标签的名称<code>&lt;dom-module id=&quot;element-name&quot;&gt;</code>，名称必须用-连字符。<br>5、在<code>&lt;dom-module&gt;</code>中放置<code>&lt;template&gt;</code>，polymer将会自动克隆template标签中的内容到自定义标签中（即本地DOM）。<br>6、Polymer({ })实现组件。<br>7、可以在组件中定义样式，通过在template内定义style实现。<br>8、事件监听 on-eventname 和addEventlistener的区别。</p>
<ul>
<li><p>polymer提供了on-eventname属性来对事件进行监听， 如监听按钮的点击事件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">paper-button</span> <span class="attr">id</span>=<span class="string">"button"</span> <span class="attr">label</span>=<span class="string">"flat button"</span> <span class="attr">on-click</span>=<span class="string">"&#123;&#123;buttonClick&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">paper-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>另外还可以用addEventlistener监听事件，如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">this</span>.$.button.addEventlistener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'click'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在两种监听方法是有区别的。  </p>
<ul>
<li>on-eventname 方式监听， 在监听函数中 this 指向的是当前polymer对象。可以用this来获得当前polymer对象的其他属性。</li>
<li>而addEventlistener 在监听函数中 this 是当前元素。</li>
</ul>
<h1 id="3-拓展–标准HTML-5组件实现API"><a href="#3-拓展–标准HTML-5组件实现API" class="headerlink" title="3 拓展–标准HTML 5组件实现API"></a>3 拓展–标准HTML 5组件实现API</h1><p>•   Shadow DOM：Shadow DOM API 支持您将元素添加到通过常用方法（比如document.getElementById()）无法访问的 DOM 树。Shadow DOM 中的元素隐藏在暗处；它们对 DOM 树其他部分实际上是不可见的，在默认情况下，它们不受周围文档中的 CSS 的影响。<br>•   模板：HTML5 模板是一个惰性文档片段。当您需要显示这些片段时，可以 创建该模板，让片段出现在 DOM 树中。这些模板允许您封装那些您可以创建和定制的 HTML、JavaScript 和 CSS。（相当于polymer中的template）<br>•   定制元素定制元素是组件的标签。定制组件的标签必须包含一个连字符（例如 <custom-tag>），除此之外，它们与内置 HTML 标签没什么区别。<br>•   HTML 导入：HTML 导入允许您从一个 HTML 文件中导入另一个，这使得您可以在其自身文件中实现定制组件。</custom-tag></p>
<p>这些 API 目前仍正开发中。撰写文本之时，还没有浏览器支持所有这些 API。因此，如果现在开始实现 HTML5 标准组件，那么可以从 Polymer 和 X-Tags 这两个开源项目中进行选择，它们提供了缺失的功能。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React简介与应用实践]]></title>
      <url>http://yoursite.com/2016/08/11/React%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h1 id="1-React简介"><a href="#1-React简介" class="headerlink" title="1.React简介"></a>1.React简介</h1><ul>
<li>仅仅是UI<br>许多人使用React作为MVC架构的V层。 尽管React并没有假设过你的其余技术栈， 但它仍可以作为一个小特征轻易地在已有项目中使用。</li>
<li>虚拟DOM<br>React为了更高超的性能而使用虚拟DOM作为其不同的实现。 它同时也可以由服务端Node.js渲染 － 而不需要过重的浏览器DOM支持。<br>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，组件的HTML结构并不会直接生成DOM，而是映射生成虚拟的JavaScript DOM结构，React又通过在这个虚拟DOM上实现了一个 diff 算法找出最小变更，再把这些变更写入实际的DOM中。这个虚拟DOM以JS结构的形式存在，计算性能会比较好，而且由于减少了实际DOM操作次数，性能会有较大提升。</li>
<li>数据流<br>React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。<br>React中文文档链接<a href="http://reactjs.cn/react/index.html" target="_blank" rel="external">http://reactjs.cn/react/index.html</a></li>
</ul>
<h1 id="2-为什么使用React"><a href="#2-为什么使用React" class="headerlink" title="2.为什么使用React"></a>2.为什么使用React<br></h1><p>React是一个 Facebook 和 Instagram 用来创建用户界面的 JavaScript 库。很多人认为 React 是 MVC 中的 V（视图）。我们创造 React 是为了解决一个问题：<strong>构建随着时间数据不断变化的大规模应用程序。</strong>为了达到这个目标，React 采用下面两个主要的思想。</p>
<ul>
<li>简单<br>仅仅只要表达出你的应用程序在任一个时间点应该长的样子，然后当底层的数据变了，React 会自动处理所有用户界面的更新。</li>
<li>声明式<br>数据变化后，React 概念上与点击“刷新”按钮类似，但仅会更新变化的部分。</li>
</ul>
<h1 id="3-数据呈现"><a href="#3-数据呈现" class="headerlink" title="3.数据呈现"></a>3.数据呈现</h1><p>用户界面能做的最基础的事就是呈现一些数据。React 让显示数据变得简单，当数据变化时，用户界面会自动同步更新。</p>
<p><strong>快速开始</strong></p>
<p>新建一个名为 hello-react.html 的文件，内容如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://fb.me/react-0.14.7.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://fb.me/JSXTransformer-0.14.7.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/jsx"</span>&gt;</span><span class="xml"></span><br><span class="line">    var HelloWorld = React.createClass(&#123;</span><br><span class="line">      render: function() &#123;</span><br><span class="line">        return (</span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            Hello,<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Your name here"</span> /&gt;</span>!</span><br><span class="line">            It is &#123;this.props.date.toTimeString()&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    setInterval(function() &#123;</span><br><span class="line">      React.render(</span><br><span class="line">        <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">date</span>=<span class="string">&#123;new</span> <span class="attr">Date</span>()&#125; /&gt;</span>,</span><br><span class="line">        document.getElementById('example')</span><br><span class="line">      );</span><br><span class="line">    &#125;, 500);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>注意事项</strong></p>
<ul>
<li>ReactJs是基于组件化的开发，所以最终你的页面应该是由若干个小组件组成的大组件。</li>
<li>可以通过属性，将值传递到组件内部，同理也可以通过属性将内部的结果传递到父级组件；要对某些值的变化做DOM操作的，要把这些值放到state中。</li>
<li><p>为组件添加外部css样式时，类名应该写成className而不是class;添加内部样式时</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">style=&#123;&#123;opacity: <span class="keyword">this</span>.state.opacity&#125;&#125;; <span class="comment">//正确</span></span><br><span class="line">style=<span class="string">"opacity:&#123;this.state.opacity&#125;;"</span>  <span class="comment">//错误</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>组件名称首字母必须大写。</p>
</li>
<li>变量名用<code>{}</code>包裹，且不能加双引号。</li>
</ul>
<p><strong>响应式更新(Reactive Updates)</strong></p>
<p>在浏览器中打开 hello-react.html ，在输入框输入你的名字。你会发现 React 在用户界面中只改变了时间，你在输入框的输入内容会保留着，即使你没有写任何代码来完成这个功能。React 也为你解决了这个问题，做了正确的事。</p>
<p>我们想到的解决方案是React 是不会去操作 DOM 的，除非不得不操作 DOM 。它用一种更快的内置仿造的 DOM 来操作差异，为你计算出效率最高的 DOM 改变。</p>
<p>这个组件的输入被称为 props - “properties”的缩写。它们通过 JSX 语法进行参数传递。你必须知道，在组件里这些属性是不可直接改变的，也就是说 this.props 是只读的。</p>
<p><strong>组件就像是函数</strong></p>
<p>React 组件非常简单。你可以认为它们就是简单的函数，接受 props 和 state 作为参数，然后渲染出 HTML。正是由于它们如此简单，使得它们非常容易理解。</p>
<h1 id="4-富交互性的动态用户界面"><a href="#4-富交互性的动态用户界面" class="headerlink" title="4.富交互性的动态用户界面"></a>4.富交互性的动态用户界面</h1><p><strong>简单例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LikeButton = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;liked: <span class="literal">false</span>&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;liked: !<span class="keyword">this</span>.state.liked&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="keyword">this</span>.state.liked? <span class="string">'like'</span>: <span class="string">'haven\'t liked'</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span><br><span class="line">        You &#123;text&#125; this. Click to toggle.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">React.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span>,</span><br><span class="line">  document.getElementById('example')</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure></p>
<p><strong>事件处理与合成事件(Synthetic Events)</strong></p>
<p>React 里只需把事件处理器（event handler）以骆峰命名（camelCased）形式当作组件的 props 传入即可，就像使用普通 HTML 那样。React 内部创建一套合成事件系统来使所有事件在 IE8 和以上浏览器表现一致。也就是说，React 知道如何冒泡和捕获事件，而且你的事件处理器接收到的 events 参数与 W3C 规范一致，无论你使用哪种浏览器。</p>
<p>如果需要在手机或平板等触摸设备上使用 React，需要调用React.initializeTouchEvents(true); 启用触摸事件处理。</p>
<p><strong>幕后原理</strong></p>
<p>在幕后，React 做了一些操作来让代码高效运行且易于理解。</p>
<p><strong>Autobinding:</strong> 在 JavaScript 里创建回调的时候，为了保证 this 的正确性，一般都需要显式地绑定方法到它的实例上。有了 React，所有方法被自动绑定到了它的组件实例上。React 还缓存这些绑定方法，所以 CPU 和内存都是非常高效。而且还能减少打字！</p>
<p><strong>事件代理 ：</strong> React 实际并没有把事件处理器绑定到节点本身。当 React 启动的时候，它在最外层使用唯一一个事件监听器处理所有事件。当组件被加载和卸载时，只是在内部映射里添加或删除事件处理器。当事件触发，React 根据映射来决定如何分发。当映射里处理器时，会当作空操作处理。</p>
<p><strong>组件其实是状态机(State Machines)</strong><br>React 把用户界面当作简单状态机。把用户界面想象成拥有不同状态然后渲染这些状态，可以轻松让用户界面和数据保持一致。</p>
<p>React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。React 来决定如何最高效地更新 DOM。</p>
<p><strong>State工作原理</strong></p>
<p>常用的通知 React 数据变化的方法是调用 setState(data, callback)。这个方法会合并（merge） data 到 this.state，并重新渲染组件。渲染完成后，调用可选的 callback回调。大部分情况下不需要提供 callback，因为 React 会负责把界面更新到最新状态。</p>
<h1 id="5-应用实例"><a href="#5-应用实例" class="headerlink" title="5.应用实例"></a>5.应用实例</h1><p>以安信农业保险管理系统保单列表为例：(当前农保系统框架重构工作已全部完成)<br><img src="http://i2.piimg.com/567571/c4e3dcdaad7d57d4.png" alt=""></p>
<p><strong>源码分析</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">   <span class="keyword">let</span> handler4policy = &#123;</span><br><span class="line">       handlerArrow: <span class="keyword">this</span>.handlerArrow.bind(<span class="keyword">this</span>),</span><br><span class="line">       handler4bd: &#123;</span><br><span class="line">           handlerFolder: <span class="keyword">this</span>.handlerFolder.bind(<span class="keyword">this</span>),</span><br><span class="line">           handler4land: &#123;</span><br><span class="line">               deleteLand: <span class="keyword">this</span>.deleteLand.bind(<span class="keyword">this</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">       &lt;div className="item-wrap" style=&#123;this.props.css&#125;&gt;</span><br><span class="line">           &lt;div className="item-search-wrap"&gt;</span><br><span class="line">               &lt;input type="text" className='item-search-input' ref='search' value=&#123;this.state.search&#125; placeholder="编号/证件号/姓名/电话" onChange=&#123;this.handlerInputChange.bind(this)&#125; onKeyDown=&#123;this.handlerKeyDown.bind(this)&#125;/&gt;</span><br><span class="line">               &lt;div className="item-search-btn" onClick=&#123;this.searchItem.bind(this)&#125;&gt;</span><br><span class="line">                   &lt;img className="item-search-logo" src="img/search.png" /&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div className="policy-add-btn" title="新建保单" onClick=&#123;this.handlerNewPolicy.bind(this)&#125;&gt;</span><br><span class="line">               &lt;img className="item-insert-logo" src="img/add_2.png" /&gt;</span><br><span class="line">               &lt;span className="item-insert-txt"&gt;新建保单&lt;/span&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div className="item-contain"&gt;</span><br><span class="line">               &lt;ul className = "item-ul"&gt;</span><br><span class="line">                   &#123;this.state.items.map((item, idx) =&gt; &#123;</span><br><span class="line">                       return (&lt;PolicyMod key = &#123;item.policy.CODING&#125; &#123;...this.config&#125; &#123;...item&#125; &#123;...handler4policy&#125; index = &#123;idx&#125; /&gt;);</span><br><span class="line">                   &#125;)&#125;</span><br><span class="line">               &lt;/ul&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>保单搜索</strong></p>
<p>通过点击保单查询图标或输入框的Enter键盘事件触发SearchItem函数接受查询信息，进而以查询信息作为关键字调用农保保单查询接口获取保单列表的JSON数据，预处理数据后通过调用React框架的setState函数更新状态机完成列表的刷新操作，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">handlerKeyDown(event) &#123;</span><br><span class="line">  <span class="keyword">let</span> [target = event.target] = [event.srcElement];</span><br><span class="line">  <span class="keyword">if</span>(event.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.search(target.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">searchItem(event) &#123;</span><br><span class="line">  <span class="keyword">this</span>.search(<span class="keyword">this</span>.refs.search.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">search(val) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;search: <span class="string">''</span>&#125;);</span><br><span class="line">  connect.fuzzyQuery(val, json =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.refreshList(json);</span><br><span class="line">      <span class="keyword">if</span>(json.length &gt; <span class="number">0</span> &amp;&amp; json[<span class="number">0</span>].bdArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> bdxq = json[<span class="number">0</span>].bdArr[<span class="number">0</span>].bdxq;</span><br><span class="line">          <span class="built_in">Map</span>.map.zoomTo(<span class="built_in">parseFloat</span>(bdxq[<span class="string">'X'</span>]), <span class="built_in">parseFloat</span>(bdxq[<span class="string">'Y'</span>]), &#123; <span class="string">'zl'</span>: <span class="number">1</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里this.state.items为保单列表展示所提供的数据(JSON数据格式)，一些可能改变列表内容的交互行为最终表现为改变该组件的state值(即组件的当前状态)即可达到轻松渲染页面的效果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">refreshList(json, fid) &#123;</span><br><span class="line">  <span class="keyword">this</span>.pretreat(json, fid);</span><br><span class="line">  <span class="built_in">Map</span>.getVectorLandData();</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;items: json&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pretreat(items, fid) &#123;</span><br><span class="line">  <span class="built_in">Map</span>.curListBdArr = [];</span><br><span class="line">  <span class="built_in">Map</span>.exceptFIDArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> item = items[i];</span><br><span class="line">      item.isOpen = <span class="keyword">this</span>.config.defaultOpen;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; item.bdArr.length; j++) &#123;</span><br><span class="line">          <span class="keyword">let</span> bd = item.bdArr[j];</span><br><span class="line">          bd.isOpen = <span class="keyword">this</span>.config.defaultOpen;</span><br><span class="line">          <span class="built_in">Map</span>.curListBdArr.push(bd.bdxq.ID);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> z = <span class="number">0</span>; z &lt; bd.landArr.length; z++) &#123;</span><br><span class="line">              <span class="keyword">let</span> land = bd.landArr[z];</span><br><span class="line">              land.highlight = <span class="literal">false</span>;</span><br><span class="line">              <span class="keyword">if</span>(fid &amp;&amp; land.FID === fid) &#123;</span><br><span class="line">                  land.highlight = <span class="literal">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">let</span> cp = <span class="keyword">this</span>._calCenterPoint(land.XMIN, land.XMAX, land.YMIN, land.YMAX);</span><br><span class="line">              land.centerPoint = <span class="string">`<span class="subst">$&#123;cp.x&#125;</span>,<span class="subst">$&#123;cp.y&#125;</span>`</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>保单操作</strong><br><img src="http://i2.piimg.com/567571/0ae00402bb09bd31.png" alt=""><br><img src="http://i2.piimg.com/567571/e0c1ced25847ed95.png" alt=""></p>
<p>当通过点击对话框中相应的事件完成对保单的添加、更新以及删除操作的响应时，利用获取到的事件调用列表组件的保单事件接受函数完成相应的业务操作并更新数据库，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">alterPolicy_ex(type, detail) &#123;</span><br><span class="line">  <span class="keyword">const</span> plTAB = config.policyTab;</span><br><span class="line">  <span class="keyword">this</span>._handlerDateForm(detail);</span><br><span class="line">  <span class="keyword">let</span> params = &#123;Fields: [], Data: [[]]&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(detail)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">'CODING'</span>) &#123;</span><br><span class="line">          params.Fields.unshift(key);</span><br><span class="line">          params.Data[<span class="number">0</span>].unshift(detail[key]);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      params.Fields.push(key);</span><br><span class="line">      params.Data[<span class="number">0</span>].push(detail[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(type === <span class="string">'INSERT'</span>) &#123;</span><br><span class="line">      detail.USRID = sessionStorage.getItem(<span class="string">'usrName'</span>);</span><br><span class="line">      detail.AREA = <span class="number">0</span>;</span><br><span class="line">      params.Fields.push(<span class="string">'USRID'</span>, <span class="string">'AREA'</span>);</span><br><span class="line">      params.Data[<span class="number">0</span>].push(detail.USRID, detail.AREA);</span><br><span class="line">      <span class="keyword">let</span> plJson = &#123; policy: detail, bdArr: [], isOpen: <span class="literal">true</span> &#125;;</span><br><span class="line">      <span class="keyword">this</span>.state.items.push(plJson);</span><br><span class="line">      toolUtil.recordAdd(config.dbName, plTAB, params, () =&gt; &#123;</span><br><span class="line">          toolUtil.newalertDiv(<span class="string">'添加成功'</span>);</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state.items.forEach(item =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (item.policy.CODING === detail.CODING) &#123;</span><br><span class="line">              item.policy = detail;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      toolUtil.recordUpdate(config.dbName, plTAB, params, () =&gt; &#123;</span><br><span class="line">          toolUtil.newalertDiv(<span class="string">'保存成功'</span>);</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deletePolicy_ex(coding) &#123;</span><br><span class="line">  <span class="keyword">let</span> curInsFeas = <span class="built_in">Map</span>.curWindowInsureFeas;</span><br><span class="line">  <span class="built_in">Map</span>.curWindowInsureFeas = curInsFeas.filter(fea =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (fea.fields.CODING == coding) <span class="built_in">Map</span>.insure_Featurelayer.removeFeature(fea);</span><br><span class="line">      <span class="keyword">return</span> (fea.fields.CODING != coding);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.state.items = <span class="keyword">this</span>.state.items.filter(item =&gt; item.policy.CODING !== coding);</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">  connect.deletePolicyByCoding(coding, () =&gt; &#123;</span><br><span class="line">      toolUtil.newalertDiv(<span class="string">'删除成功'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同样的，在处理不同的事件操作过程中通过改变组件的state值(这里是state.items)，添加时push一条记录、更新替换一条记录、以及删除时剔除一条记录的方式，统一更改state值，再一次调用setState函数完成保单列表的刷新工作，渲染保单。最后根据不同的需求增删改操作数据库，完成保单的操作任务。</p>
<p><strong>标的操作</strong><br><img src="http://i2.piimg.com/567571/7f1063597804f119.png" alt=""><br><img src="http://i2.piimg.com/567571/6d47149125c5fd49.png" alt=""></p>
<p>在完成对标的的添加、更新以及删除操作时，利用获取到的事件调用列表组件的标的事件接受函数完成相应的业务操作并更新数据库，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">alterBd_ex(type, detail, point) &#123;</span><br><span class="line">  <span class="keyword">const</span> bdTAB = config.bdTab;</span><br><span class="line">  <span class="keyword">let</span> params = &#123;Fields: [], Data: [[]]&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(detail)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">'ID'</span>) &#123;</span><br><span class="line">          params.Fields.unshift(key);</span><br><span class="line">          params.Data[<span class="number">0</span>].unshift(detail[key]);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      params.Fields.push(key);</span><br><span class="line">      params.Data[<span class="number">0</span>].push(detail[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(type === <span class="string">'INSERT'</span>) &#123;</span><br><span class="line">      detail.AREA = <span class="number">0</span>;</span><br><span class="line">      params.Fields.push(<span class="string">'AREA'</span>);</span><br><span class="line">      params.Data[<span class="number">0</span>].push(detail.AREA);</span><br><span class="line">      <span class="keyword">let</span> bdJson = &#123; bdxq: detail, landArr: [], isOpen: <span class="literal">true</span> &#125;;</span><br><span class="line">      <span class="keyword">this</span>.state.items.forEach(item =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (item.policy.CODING === detail.CODING) &#123;</span><br><span class="line">              item.bdArr.push(bdJson);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      toolUtil.recordAdd(config.dbName, bdTAB, params, () =&gt; &#123;</span><br><span class="line">          toolUtil.newalertDiv(<span class="string">'添加成功'</span>);</span><br><span class="line">          <span class="built_in">Map</span>.map.zoomTo(<span class="built_in">parseFloat</span>(point.X), <span class="built_in">parseFloat</span>(point.Y), &#123; zl: <span class="number">1</span> &#125;);</span><br><span class="line">          <span class="keyword">let</span> SQL = &#123; <span class="string">'fields'</span>: <span class="string">'max(ID)'</span>, <span class="string">'lyr'</span>: bdTAB, <span class="string">'filter'</span>: <span class="string">''</span> &#125;;</span><br><span class="line">          toolUtil.recordQuery(config.dbName, SQL, msg =&gt; &#123;</span><br><span class="line">              bdJson.bdxq.ID = msg[<span class="number">0</span>][<span class="string">'max(ID)'</span>];</span><br><span class="line">              <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state.items.forEach(item =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (item.policy.CODING === detail.CODING) &#123;</span><br><span class="line">              <span class="keyword">let</span> bdArr = item.bdArr;</span><br><span class="line">              bdArr.forEach(bd =&gt; &#123;</span><br><span class="line">                  <span class="keyword">if</span>(bd.bdxq.ID === detail.ID) &#123;</span><br><span class="line">                      bd.bdxq = detail;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      toolUtil.recordUpdate(config.dbName, bdTAB, params, () =&gt; &#123;</span><br><span class="line">          toolUtil.newalertDiv(<span class="string">'保存成功'</span>);</span><br><span class="line">          <span class="built_in">Map</span>.map.zoomTo(<span class="built_in">parseFloat</span>(point.X), <span class="built_in">parseFloat</span>(point.Y), &#123; zl: <span class="number">1</span> &#125;);</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同保单操作，在处理不同的事件操作过程中依然通过改变组件的state值，调用setState函数完成保单列表的刷新工作。最后根据不同的需求增删改操作数据库，完成标的的操作任务。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">deleteBd_ex(coding, bdid, area) &#123;</span><br><span class="line">  <span class="keyword">let</span> curInsFeas = <span class="built_in">Map</span>.curWindowInsureFeas;</span><br><span class="line">  <span class="built_in">Map</span>.curWindowInsureFeas = curInsFeas.filter(fea =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (fea.fields.BDID === bdid) <span class="built_in">Map</span>.insure_Featurelayer.removeFeature(fea);</span><br><span class="line">      <span class="keyword">return</span> (fea.fields.BDID !== bdid);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.state.items.forEach(item =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.policy.CODING == coding) &#123;</span><br><span class="line">          item.bdArr = item.bdArr.filter(bd =&gt; bd.bdxq.ID !== bdid);</span><br><span class="line">          item.policy.AREA = (<span class="built_in">parseFloat</span>(item.policy.AREA) - area).toFixed(<span class="number">2</span>);</span><br><span class="line">          connect.updateArea4Policy(coding, item.policy.AREA);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">  connect.deleteBdById(bdid, () =&gt; &#123;</span><br><span class="line">      toolUtil.newalertDiv(<span class="string">'删除成功'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>地块操作</strong></p>
<p>1.添加地块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">insertLand_ex(selectedfea) &#123;</span><br><span class="line">  <span class="keyword">let</span> [fields, params, land = &#123;BDID: curbdid, CODING: curcoding&#125;] = [selectedfea.fields, &#123;Fields: landRelFields, Data: [[]]&#125;];</span><br><span class="line">  landRelFields.forEach((fid) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(fields[fid]) &#123;</span><br><span class="line">          land[fid] = fields[fid];</span><br><span class="line">          params.Data[<span class="number">0</span>].push(fields[fid]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          fid === <span class="string">'BDID'</span> &amp;&amp; params.Data[<span class="number">0</span>].push(curbdid);</span><br><span class="line">          fid === <span class="string">'CODING'</span> &amp;&amp; params.Data[<span class="number">0</span>].push(curcoding);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> cp = <span class="keyword">this</span>._calCenterPoint(land.XMIN, land.XMAX, land.YMIN, land.YMAX);</span><br><span class="line">  land.centerPoint = <span class="string">`<span class="subst">$&#123;cp.x&#125;</span>,<span class="subst">$&#123;cp.y&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  selectedfea.addFields(&#123;<span class="string">'BDID'</span>: curbdid, <span class="string">'CODING'</span>: curcoding&#125;);</span><br><span class="line">  <span class="built_in">Map</span>.curWindowInsureFeas.push(selectedfea);</span><br><span class="line">  <span class="built_in">Map</span>.curWindowInsureFeas.forEach(fea =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(fea.fields.BDID == curbdid) &#123;</span><br><span class="line">          <span class="built_in">Map</span>.insure_Featurelayer.addFeature(fea);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(!toolUtil.isInArr(curbdid, <span class="built_in">Map</span>.curListBdArr)) &#123;</span><br><span class="line">      <span class="built_in">Map</span>.curListBdArr.push(curbdid);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.state.items.forEach((item) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.policy.CODING === curcoding) &#123;</span><br><span class="line">          <span class="keyword">let</span> bdArr = item.bdArr;</span><br><span class="line">          bdArr.forEach((bd) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (bd.bdxq.ID === curbdid) &#123;</span><br><span class="line">                  bd.isOpen = <span class="literal">true</span>;</span><br><span class="line">                  bd.landArr.push(land);</span><br><span class="line">                  area = <span class="built_in">parseFloat</span>(land.SHPAREA) / <span class="number">666.67</span>;</span><br><span class="line">                  bd.bdxq.AREA = (<span class="built_in">parseFloat</span>(bd.bdxq.AREA) + area).toFixed(<span class="number">2</span>);</span><br><span class="line">                  connect.updateArea4Bd(bd.bdxq.ID, bd.bdxq.AREA);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          item.policy.AREA = (<span class="built_in">parseFloat</span>(item.policy.AREA) + area).toFixed(<span class="number">2</span>);</span><br><span class="line">          connect.updateArea4Policy(item.policy.CODING, item.policy.AREA);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">  toolUtil.recordAdd(config.dbName, config.landRelTab, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.删除地块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">deleteLand(fid, bdid, coding) &#123;</span><br><span class="line">  <span class="keyword">let</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">Map</span>.curWindowInsureFeas = <span class="built_in">Map</span>.curWindowInsureFeas.filter(fea =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (fea.fields.FID === fid) <span class="built_in">Map</span>.insure_Featurelayer.removeFeature(fea);</span><br><span class="line">      <span class="keyword">return</span> (fea.fields.FID !== fid);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.state.items.forEach((item) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.policy.CODING === coding) &#123;</span><br><span class="line">          <span class="keyword">let</span> bdArr = item.bdArr;</span><br><span class="line">          bdArr.forEach((bd) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (bd.bdxq.ID === bdid) &#123;</span><br><span class="line">                  bd.landArr = bd.landArr.filter(land =&gt; &#123;</span><br><span class="line">                      <span class="keyword">if</span> (land.FID === fid) area = <span class="built_in">parseFloat</span>(land.SHPAREA) / <span class="number">666.67</span>;</span><br><span class="line">                      <span class="keyword">return</span> land.FID !== fid;</span><br><span class="line">                  &#125;);</span><br><span class="line">                  bd.bdxq.AREA = (<span class="built_in">parseFloat</span>(bd.bdxq.AREA) - area).toFixed(<span class="number">2</span>);</span><br><span class="line">                  connect.updateArea4Bd(bd.bdxq.ID, bd.bdxq.AREA);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          item.policy.AREA = (<span class="built_in">parseFloat</span>(item.policy.AREA) - area).toFixed(<span class="number">2</span>);</span><br><span class="line">          connect.updateArea4Policy(item.policy.CODING, item.policy.AREA);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">  <span class="keyword">let</span> params = &#123;</span><br><span class="line">      <span class="string">'Fields'</span>: <span class="string">'FID'</span>,</span><br><span class="line">      <span class="string">'Data'</span>: [fid]</span><br><span class="line">  &#125;;</span><br><span class="line">  toolUtil.recordDelete(config.dbName, config.landRelTab, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>地块操作任务需要记录点选地块的要素信息(包括空间、属性信息)或地块的FID，在地图上高亮显示点选的保险地块后调用列表组件的接收函数将该要素信息添加到state中，或在state中剔除，更新组件state完成地块的添加或删除操作。最后更新数据库完成录入工作。</p>
<h1 id="6-与其他框架的比较"><a href="#6-与其他框架的比较" class="headerlink" title="6.与其他框架的比较"></a>6.与其他框架的比较</h1><h2 id="React与Angular"><a href="#React与Angular" class="headerlink" title="React与Angular"></a>React与Angular</h2><ul>
<li>Reactjs作为view本身非常独立，不仅可以在浏览器上用，还可以在server端结合nodejs做模板。</li>
<li>除了独立，Reactjs还很灵活小巧，用起来像拼lego的积木，一个component接着另一个component。</li>
<li><p>在性能方面，由于运用了virtual dom技术，Reactjs只在调用setstate的时候会更新dom，而且还是先更新virtual dom，然后和实际dom比较，最后再更新实际dom。这个过程比起angularjs, knockoutjs的bind方式来说，一是更新dom的次数少，二是更新dom的内容少，速度肯定是快了的。另外Reactjs用了jsx，这个相当于半个新语言了。</p>
</li>
<li><p>angularjs是一个m-v-whateever framework。framework的一个特点就是很全面，除了m-v-whatever面面俱到，它还自带了很多$开头的service，$http, $route, $q(defer),$cookie等等。 </p>
</li>
<li>angularjs的架构清晰，分工明确，整个框架充满了DI的思路，耦合性非常低，对象都是被inject的，也就是说每个对象都可以轻易被替换而不影响其他对象。</li>
</ul>
<h2 id="React与Polymer"><a href="#React与Polymer" class="headerlink" title="React与Polymer"></a>React与Polymer</h2><p>Polymer沿袭了正统的HTML+CSS+JS思路进行革新，很多组件化的功能靠浏览器自身的功能去支持，用浏览器原生的接口去做组件的集成，使用了效率最高的Vanilla JS ，易学易用。但是在兼容性方面不如React，React利用jsx集合Babel转码工具等，较好的解决了兼容性问题支持ie8及以上。</p>
<h2 id="React与jQuery"><a href="#React与jQuery" class="headerlink" title="React与jQuery"></a>React与jQuery</h2><p>jQuery的思路是以dom为中心，所以的操作都在围绕着dom的变化来操作。也就是jQuery的核心思想是dom可变。</p>
<p>React认为页面dom不可变，所以当状态和属性发生变化时会re-render dom。React会根据新的状态和属性生成新的VirtualDOM Tree然后和旧的VirtualDOM Tree做对比(类似于版本控制的机制)。通过对比计算出最小的更新代价，然后将这些更新的方法进入队列。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在线地图配准实现原理]]></title>
      <url>http://yoursite.com/2016/08/10/%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE%E9%85%8D%E5%87%86%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="1-基本思路"><a href="#1-基本思路" class="headerlink" title="1 基本思路"></a>1 基本思路</h1><p>1) 利用 HTML5 提供的 File API读取<code>&lt;input&gt;</code>标签中的内容，使用FileReader对象的readAsDataURL方法对文件进行base-64编码，然后将图片的src属性设置为编码后的Data URL。</p>
<p>2) 创建一个与地图同宽高的<code>&lt;canvas&gt;</code>标签，将图片的内容通过Canvas API中的drawImage方法绘制到canvas中，之后对图片的缩放、平移、旋转等操作都是在canvas上进行操作。</p>
<p>3) 当处于配准状态，即canvas的z-index属性设置为最高时，绑定mousedown事件，记录下相对于原始图片的坐标，以及屏幕坐标，并将屏幕坐标改为地理坐标。在地图及<code>&lt;canvas&gt;</code>元素上分别标注出该点的位置及标注的序号。</p>
<p>4) 判断控制点个数，大于等于4个点则调用geoserver服务器的仿射变换服务，返回变换参数和误差估计，若计算出的误差较大可删除误差较大的控制点调整标准差。</p>
<p>5) 上传文件及配准信息：将图片保存问tif格式保存到后台服务器；将控制点信息保存为cpt格式的文件，cpts为json格式数组[{cpt},{cpt},{cpt},…]，其中cpt:{  “ptNo”:”pt1”;<br>x0:double;y0: double;x1:double;y1:double;}（其中：x0,y0:屏幕坐标，x1,y1：地理坐标）；将仿射变换服务返回的信息保存为twf格式的文件，tfw辅助文件是一个包含六行内容的ASCII文本文件，每行为一个数值，含义如下：</p>
<ul>
<li>X方向上的象素分辨素</li>
<li>X方向的旋转系数</li>
<li>Y方向的旋转系数</li>
<li>Y方向上的象素分辨率</li>
<li>栅格地图左上角象素中心X坐标</li>
<li>栅格地图左上角象素中心Y坐标</li>
</ul>
<p>6) 最后在数据库表中添加图层信息，具体操作为：向g_ftset表中添加一条记录，保存tfw<br>文件的路径；向g_layers添加一条记录，其中ftset_id为刚刚插入的主键id，yrtype:geoimg/tfw; path：tfw格式文件。</p>
<h1 id="2-关键技术"><a href="#2-关键技术" class="headerlink" title="2 关键技术"></a>2 关键技术</h1><h2 id="2-1-实现与图片交互"><a href="#2-1-实现与图片交互" class="headerlink" title="2.1 实现与图片交互"></a>2.1 实现与图片交互</h2><p>创建一个对象存储图片的信息，包括图片的位置（top、left）；图片大小（width、height）<br>缩放比例（scalex、scaley）；倾斜角度（theta）；透明度（opacity）；标注点信息（markers）等。</p>
<p>利用以上信息计算图片的四个角的屏幕坐标，计算过程如下：<br>1）根据图片宽高及缩放比例计算图片目前的宽高值。<br>2）计算左上角屏幕坐标<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算对角线长度、对角线与底边的夹角</span></span><br><span class="line">    <span class="keyword">this</span>._hypotenuse = <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(<span class="keyword">this</span>.currentWidth / <span class="number">2</span>, <span class="number">2</span>) + </span><br><span class="line">                    <span class="built_in">Math</span>.pow(<span class="keyword">this</span>.currentHeight / <span class="number">2</span>, <span class="number">2</span>));   </span><br><span class="line">    <span class="keyword">this</span>._angle = <span class="built_in">Math</span>.atan(<span class="keyword">this</span>.currentHeight / <span class="keyword">this</span>.currentWidth;</span><br><span class="line"><span class="comment">//计算x、y方向的偏移量   </span></span><br><span class="line">    <span class="keyword">var</span> offsetX = <span class="built_in">Math</span>.cos(<span class="keyword">this</span>._angle + <span class="keyword">this</span>.theta) * <span class="keyword">this</span>._hypotenuse;</span><br><span class="line">    <span class="keyword">var</span> offsetY = <span class="built_in">Math</span>.sin(<span class="keyword">this</span>._angle + <span class="keyword">this</span>.theta) * <span class="keyword">this</span>._hypotenuse;</span><br><span class="line"><span class="comment">//计算左上角坐标</span></span><br><span class="line">    <span class="keyword">var</span> tl = &#123;</span><br><span class="line">        x: <span class="keyword">this</span>.left - offsetX,</span><br><span class="line">        y: <span class="keyword">this</span>.top - offsetY</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p>
<p>3）计算另外三个点屏幕坐标<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据倾斜角计算其sin值、cos值</span></span><br><span class="line">    <span class="keyword">var</span> sinTh = <span class="built_in">Math</span>.sin(theta);</span><br><span class="line">    <span class="keyword">var</span> cosTh = <span class="built_in">Math</span>.cos(theta);</span><br><span class="line"><span class="comment">//计算右上角坐标</span></span><br><span class="line">    <span class="keyword">var</span> tr = &#123;</span><br><span class="line">        x: tl.x + (<span class="keyword">this</span>.currentWidth * cosTh),</span><br><span class="line">        y: tl.y + (<span class="keyword">this</span>.currentWidth * sinTh)</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//计算右下角坐标</span></span><br><span class="line">    <span class="keyword">var</span> br = &#123;</span><br><span class="line">        x: tr.x - (<span class="keyword">this</span>.currentHeight * sinTh),</span><br><span class="line">        y: tr.y + (<span class="keyword">this</span>.currentHeight * cosTh)</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//计算右上角坐标</span></span><br><span class="line">    <span class="keyword">var</span> bl = &#123;</span><br><span class="line">        x: tl.x - (<span class="keyword">this</span>.currentHeight * sinTh),</span><br><span class="line">        y: tl.y + (<span class="keyword">this</span>.currentHeight * cosTh)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p>
<p>4）设置每个点的四个坐标<br>    根据角落大小(cornersize)、倾斜角（theta）及之前计算出的四个角的屏幕坐标计算每个角的左上角、右上角、右下角及左下角屏幕坐标。</p>
<h3 id="2-1-1-图片平移"><a href="#2-1-1-图片平移" class="headerlink" title="2.1.1 图片平移"></a>2.1.1 图片平移</h3><p>1）绑定<code>&lt;canvas&gt;</code>元素的鼠标按下mousedown事件，判断单击的点是否被图片包含，判断方法如下：<br>根据四个角的坐标点，组成上、右、下、左四条边：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    topline: &#123; </span><br><span class="line">        o: oCoords.tl,</span><br><span class="line">        d: oCoords.tr </span><br><span class="line">    &#125;,</span><br><span class="line">    rightline: &#123; </span><br><span class="line">        o: oCoords.tr,</span><br><span class="line">        d: oCoords.br </span><br><span class="line">    &#125;,</span><br><span class="line">    bottomline: &#123; </span><br><span class="line">        o: oCoords.br,</span><br><span class="line">        d: oCoords.bl </span><br><span class="line">    &#125;,</span><br><span class="line">    leftline: &#123; </span><br><span class="line">        o: oCoords.bl,</span><br><span class="line">        d: oCoords.tl </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当鼠标的y轴值位于四个点的y轴最大值与最小值之间时，计算坐标点所在的水平线上<br>与四条边相交且x轴值大于鼠标点击的x值的点的个数（其实是向右做水平方向的射线），若相交的个数为奇数，则点击到了图片。</p>
<p>2）判断点击的坐标点是否被包含在四个角落的范围内，如果是则说明当前处于缩放状态，否的话则说明目前处于平移状态，判断方法同上。记录下offsetX值和offsetY值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> offsetX = mp.ex - oImg.left;</span><br><span class="line"><span class="keyword">var</span> offsetY = mp.ey - oImg.top;</span><br></pre></td></tr></table></figure></p>
<p>3）绑定<code>&lt;canvas&gt;</code>元素的鼠标按下mousemove事件，当鼠标移动时触发事件，执行平移图片操作时动态修改图片的top、left值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">oImg.left = mp.ex - offsetX;</span><br><span class="line">oImg.top = mp.ey - offsetY;</span><br></pre></td></tr></table></figure></p>
<p>4）最后清空canvas画布中的内容，利用Canvas API的drawImage方法按照图片的原始大小将图片重新绘制到canvas元素中，并利用Canvas API的context.translate(oImg.left, oImg.top)平移canvas中的内容。</p>
<h3 id="2-1-2-缩放、旋转图片"><a href="#2-1-2-缩放、旋转图片" class="headerlink" title="2.1.2 缩放、旋转图片"></a>2.1.2 缩放、旋转图片</h3><p>1）若鼠标点被包含在四个角落的范围内，说明当前处于缩放、旋转状态，记录下当前<br>的鼠标位置、缩放值（scalex）和倾斜角度（theta）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._currentTransform = &#123; </span><br><span class="line">    ex: mp.ex, </span><br><span class="line">    ey: mp.ey,</span><br><span class="line">    left: oImg.left, </span><br><span class="line">    top: oImg.top,</span><br><span class="line">    scalex: oImg.scalex,</span><br><span class="line">    theta: oImg.theta </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>2）移动鼠标时，动态计算当前图片的缩放大小scalex：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算鼠标点击时的坐标与左上角距离以及当前鼠标位置与左上角距离</span></span><br><span class="line"><span class="keyword">var</span> lastLen =<span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(<span class="keyword">this</span>._currentTransform.ey - <span class="keyword">this</span>._currentTransform.top, <span class="number">2</span>)    </span><br><span class="line">         +<span class="built_in">Math</span>.pow(<span class="keyword">this</span>._currentTransform.ex - <span class="keyword">this</span>._currentTransform.left, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">var</span> curLen = <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(mp.ey - <span class="keyword">this</span>._currentTransform.top, <span class="number">2</span>) </span><br><span class="line">         +<span class="built_in">Math</span>.pow(mp.ex - <span class="keyword">this</span>._currentTransform.left, <span class="number">2</span>));</span><br><span class="line"><span class="comment">//根据之前的缩放值计算当前缩放值</span></span><br><span class="line"><span class="keyword">var</span> scale = <span class="keyword">this</span>._currentTransform.scalex * (curLen / lastLen);</span><br></pre></td></tr></table></figure></p>
<p>3）移动鼠标时，动态计算当前图片的倾斜角度theta：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//鼠标点击时，图片左上角垂线与左上角和鼠标点的连线构成的角度</span></span><br><span class="line"><span class="keyword">var</span> lastAngle = <span class="built_in">Math</span>.atan2(</span><br><span class="line">    <span class="keyword">this</span>._currentTransform.ey - <span class="keyword">this</span>._currentTransform.top,</span><br><span class="line">    <span class="keyword">this</span>._currentTransform.ex - <span class="keyword">this</span>._currentTransform.left</span><br><span class="line">);</span><br><span class="line"><span class="comment">//鼠标移动时，图片左上角垂线与左上角和鼠标点的连线构成的角度</span></span><br><span class="line"><span class="keyword">var</span> curAngle = <span class="built_in">Math</span>.atan2(</span><br><span class="line">mp.ey - <span class="keyword">this</span>._currentTransform.top,</span><br><span class="line">    mp.ex - <span class="keyword">this</span>._currentTransform.left</span><br><span class="line">);</span><br><span class="line"><span class="comment">//动态计算当前图片的倾斜角度</span></span><br><span class="line"><span class="keyword">var</span> theta = (curAngle - lastAngle) + <span class="keyword">this</span>._currentTransform.theta;</span><br></pre></td></tr></table></figure></p>
<p>4）清空canvas画布中的内容，利用Canvas API的drawImage方法按照图片的原始大小将图片重新绘制到canvas元素中，并利用Canvas API的context.rotate(oImg.theta)和context.scale(oImg.scalex, oImg.scaley)旋转和缩放canvas中的内容。</p>
<h2 id="2-2-计算控制点图片坐标"><a href="#2-2-计算控制点图片坐标" class="headerlink" title="2.2 计算控制点图片坐标"></a>2.2 计算控制点图片坐标</h2><p>捕获鼠标点击事件，得到鼠标点坐标，计算坐标点与图片左上角点的x、y轴的差值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dltX = mp.ex - tl.x;</span><br><span class="line"><span class="keyword">var</span> dltY = mp.ey - tl.y;</span><br></pre></td></tr></table></figure></p>
<p>计算坐标点与左上角点连线的长度以及左上角垂线与连线的角度：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> angle = <span class="built_in">Math</span>.atan(dltX / dltY);</span><br><span class="line"><span class="keyword">var</span> dis = <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow( dltX , <span class="number">2</span>) + <span class="built_in">Math</span>.pow( dltY , <span class="number">2</span>));</span><br></pre></td></tr></table></figure></p>
<p>最后计算坐标点相对于图片左上角的坐标值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coordX = <span class="built_in">parseInt</span>( <span class="built_in">Math</span>.abs( <span class="built_in">Math</span>.sin(angle+theta) * dis ) / oImg.scalex );</span><br><span class="line"><span class="keyword">var</span> coordY = <span class="built_in">parseInt</span>( <span class="built_in">Math</span>.abs( <span class="built_in">Math</span>.cos(angle+theta) * dis ) / oImg.scalex );</span><br></pre></td></tr></table></figure></p>
<h1 id="3-改进计划"><a href="#3-改进计划" class="headerlink" title="3 改进计划"></a>3 改进计划</h1><h2 id="3-1-现实配准功能"><a href="#3-1-现实配准功能" class="headerlink" title="3.1 现实配准功能"></a>3.1 现实配准功能</h2><p>目前只实现了将配准信息以及仿射变换的结果保存并上传到服务器中，但是还不能将tif文件作为一个图层加载到地图中，接下来进一步实现将其作为图层加载。</p>
<h2 id="3-2-再次修改控制点"><a href="#3-2-再次修改控制点" class="headerlink" title="3.2 再次修改控制点"></a>3.2 再次修改控制点</h2><p>可利用已经保存的控制点信息，提供再次修改的功能，这样用户可以在上一次配准工作的基础上继续完成配准操作，保证配准结果的准确性。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[热力图实现原理]]></title>
      <url>http://yoursite.com/2016/08/10/%E7%83%AD%E5%8A%9B%E5%9B%BE%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p><img src="http://i4.piimg.com/567571/b2fbd101d3f5b5bd.jpg" alt=""></p>
<h1 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1 使用方法"></a>1 使用方法</h1><p>1）实例化一个热力图图层，传入图层ID号，并将其添加到地图上：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heatmapLayer = <span class="keyword">new</span> gEcnu.Layer.Heatmap(<span class="string">'heatmapLayer'</span>);</span><br><span class="line">map.addLayer(heatmapLayer);</span><br></pre></td></tr></table></figure></p>
<p>2）为热力图添加数据：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = &#123;</span><br><span class="line">    x: worldPoint.x, <span class="comment">//点的x坐标</span></span><br><span class="line">    y: worldPoint.y, <span class="comment">//点的y坐标</span></span><br><span class="line">    value: val,      <span class="comment">//数值大小，最后表现为该点的颜色值</span></span><br><span class="line">    radius: radius   <span class="comment">//该点的半径大小</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123; </span><br><span class="line">    max: max,  <span class="comment">//数据中的最大值</span></span><br><span class="line">    data: [point,point,point...]  <span class="comment">//其中point为每一个数据点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.heatmapLayer.setData(data);</span><br></pre></td></tr></table></figure></p>
<h1 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2 基本思路"></a>2 基本思路</h1><p>利用 HTML5 提供的 Canvas API的createRadialGradient方法对每个点绘制出渐变圆形，再使用drawImage方法绘制到一个画布上；创建一个宽为256px,高为1px的矩形，利用createLinearGradient方法对其进行填色；<br><img src="http://i1.piimg.com/567571/a257fb493cca451d.png" alt=""><br>最后根据画布上每个点的透明度判读该点使用的颜色，透明度的值越大，颜色越红，值越小，颜色越蓝。</p>
<h1 id="3-热力图的实现"><a href="#3-热力图的实现" class="headerlink" title="3 热力图的实现"></a>3 热力图的实现</h1><h2 id="3-1-插件形式的写法"><a href="#3-1-插件形式的写法" class="headerlink" title="3.1 插件形式的写法"></a>3.1 插件形式的写法</h2><h3 id="3-1-1-支持模块化环境"><a href="#3-1-1-支持模块化环境" class="headerlink" title="3.1.1 支持模块化环境"></a>3.1.1 支持模块化环境</h3><p>通过写成自执行匿名函数的形式，并将变量名、作用域以及函数主体以参数的形式传入。判读当前处于什么模式，如果符合CMD规范，就使用module.exports的形式导出；如果符合AMD规范，就使用define()的形式导出；若都不满足，则在传入的作用域中添加一个以传入的变量名为键名的属性，值为传入的函数体的执行结果。</p>
<h3 id="3-1-2-闭包的写法"><a href="#3-1-2-闭包的写法" class="headerlink" title="3.1.2 闭包的写法"></a>3.1.2 闭包的写法</h3><p>将不必对外暴露的函数和变量放在闭包中，转变为私有变量。通过这种方式，外部无法改变私有变量的值，保证变量不会被篡改。</p>
<h3 id="3-1-3-在文件开头加上分号"><a href="#3-1-3-在文件开头加上分号" class="headerlink" title="3.1.3 在文件开头加上分号"></a>3.1.3 在文件开头加上分号</h3><p>保证文件在被合并压缩时不会发生错误。因为文件的开头就是一对括号，在文件合并时，若上一个文件的最后是一个函数，就会产生直接执行该函数的结果，导致意想不到的错误，因此在文件的最开头初加上分号，防止错误的发生。<br><img src="http://i1.piimg.com/567571/1220aa985f356fc1.png" alt=""></p>
<h2 id="3-2-数据管理"><a href="#3-2-数据管理" class="headerlink" title="3.2 数据管理"></a>3.2 数据管理</h2><h3 id="3-2-1-数据存储"><a href="#3-2-1-数据存储" class="headerlink" title="3.2.1 数据存储"></a>3.2.1 数据存储</h3><p>改变传入数据的形式，将每个点的值value和半径radius都保存在一个二维数组中，第一维为点的x左边，第二维为点的y坐标，这样便于比较传入的数据与已经存储的数据，若传入的数据点中有点的x坐标和y坐标都相同的情况，则将该点的值累加。</p>
<h3 id="3-2-2-追加数据"><a href="#3-2-2-追加数据" class="headerlink" title="3.2.2 追加数据"></a>3.2.2 追加数据</h3><p>可以向Store中追加数据，若数据点不止一个，而是以数组的形式传入，则递归处理数据。若传入数据的值小于原来数据的最大值，则在Canvas中追加绘制该点的图形；反之若大于最大值，则需要重新绘制整个Canvas的内容。</p>
<h2 id="3-3-数据渲染"><a href="#3-3-数据渲染" class="headerlink" title="3.3 数据渲染"></a>3.3 数据渲染</h2><h3 id="3-3-1-预渲染"><a href="#3-3-1-预渲染" class="headerlink" title="3.3.1 预渲染"></a>3.3.1 预渲染</h3><p>由于数据量较大，将每个点绘制到画布时会导致频繁的重绘，因此考虑使用一个与目标Canvas画布同等大小且不可见的画布。由于离屏Canvas是不可见的，在DOM解析时，并不会对其进行渲染，只有将其再绘制到可见的目标画布上，才会解析样式进行渲染，因此绘制每一个点时都将其绘制到离屏画布中。</p>
<h3 id="3-3-2-绘制每个数据点的黑白渐变圆"><a href="#3-3-2-绘制每个数据点的黑白渐变圆" class="headerlink" title="3.3.2 绘制每个数据点的黑白渐变圆"></a>3.3.2 绘制每个数据点的黑白渐变圆</h3><p>创建一个临时的Canvas 画布，画布的宽和高都设置为半径值的2倍。根据数据点的半径值，以及模糊数，绘制一个矩形，矩形的大小等于画布的大小。并利用Canvas API的createRadialGradient方法绘制渐变圆，设置渐变圆的起点颜色为黑色，终点颜色为白色，对矩形进行填充，填充的结果如图所示。对于不同的模糊数，生成的渐变圆效果有所不同，如图左边的渐变圆模糊数blur为0.15，左边的渐变圆模糊数blur为0.8，在系统中我们将其设置为0.15。<br><img src="http://i4.piimg.com/567571/56ba43b2761a9966.jpg" alt="">       </p>
<p>根据每个点的value在最小值与最大值之间的百分比，设置预渲染画布的透明度，并使用drawImage方法将每一个点的数据绘制到预渲染画布中，最后得到如下的效果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shadowCtx.globalAlpha = (value-min)/(max-min);</span><br><span class="line">shadowCtx.drawImage(tpl, rectX, rectY);</span><br></pre></td></tr></table></figure></p>
<p><img src="http://i4.piimg.com/567571/1f7cea12f9002334.png" alt=""></p>
<h3 id="3-3-3-创建颜色模板"><a href="#3-3-3-创建颜色模板" class="headerlink" title="3.3.3 创建颜色模板"></a>3.3.3 创建颜色模板</h3><p>在一个临时的Canvas 画布中，将画布的宽设置为256px,高设置为1px，同时绘制一个同等大小的矩形，利用createLinearGradient方法创建一条线性颜色渐变对其进行填色，使用Canvas API的getImageData方法得到ImageData对象，该对象的data属性中存放着每个点的R（红色）G（绿色）B（蓝色）A（透明度）信息，因此我们得到的data的长度为256*4=1024，每四个元素对应一个点的信息。如图前四个元素对应第一个蓝色像素点的信息。<br><img src="http://i1.piimg.com/567571/a257fb493cca451d.png" alt=""></p>
<h3 id="3-3-4-着色"><a href="#3-3-4-着色" class="headerlink" title="3.3.4 着色"></a>3.3.4 着色</h3><p>对预渲染画布着色，并将其绘制到可见Canvas画布中。同样使用getImageData方法得到预渲染画布的ImageData对象，取得data属性中每隔4个元素的值，即每个点的透明度。依据该值，以及颜色模板，对该点着色，若该点的值为0则赋为第一个点的颜色蓝色，若该点的值为255，则赋为最后一个点的颜色红色。将该点的RGBA属性设置为对应颜色的RGBA属性。<br>修改完成后，使用Canvas API的putImageData方法，将预渲染画布中的内容绘制到可见画布上。<br><img src="http://i4.piimg.com/567571/7d289451dae4bac4.png" alt=""></p>
<h1 id="4-与ccgis平台的对接"><a href="#4-与ccgis平台的对接" class="headerlink" title="4 与ccgis平台的对接"></a>4 与ccgis平台的对接</h1><h2 id="4-1-热力图层"><a href="#4-1-热力图层" class="headerlink" title="4.1 热力图层"></a>4.1 热力图层</h2><p>构造热力图层，继承自要素图层，初始化时将该图层的oClass属性设置为heatmapLayer<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gEcnu.Layer.Heatmap = gEcnu.Layer.Feature.extend();</span><br></pre></td></tr></table></figure></p>
<p>当将其添加到地图时，使用gHeatmap.create创建热力图。添加数据时，先对数据进行预处理，将传入的世界坐标转为屏幕坐标。缩放地图时，每一个数据点的半径也要相应缩放，因此对半径乘以缩放系数。<br>传入要素集时，首先取得视窗范围内的要素，并将每个要素的坐标转换为屏幕坐标，最后使用setData方法添加到图层中。</p>
<h1 id="5-改进计划"><a href="#5-改进计划" class="headerlink" title="5 改进计划"></a>5 改进计划</h1><p>目前使用随机数作为模拟数据，进一步可以考虑应用到真实数据中。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jsEditor在线代码编辑器]]></title>
      <url>http://yoursite.com/2016/08/10/jsEditor%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="1-系统设计"><a href="#1-系统设计" class="headerlink" title="1 系统设计"></a>1 系统设计</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>能够在线展示及编写html、js、css、php代码,拥有实时预览、代码高亮、自动完成、在线发布等多项特性,提供新建项目、文件上传、删除、下载及管理功能。<br>网址：<a href="https://ccgis.cn/jsEditor/modules/logreg/login/login.html" target="_blank" rel="external">https://ccgis.cn/jsEditor/modules/logreg/login/login.html</a><br><img src="http://i4.piimg.com/567571/fece5e2519562fdb.jpg" alt=""><br><img src="http://i4.piimg.com/567571/a41bedad664b974d.jpg" alt=""></p>
<h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><p>系统分为以下三个功能模块，分别是项目管理模块、代码编辑及运行模块、工具栏，如下图所示。<br><img src="http://i4.piimg.com/567571/cd76fbd7b73c6463.jpg" alt=""></p>
<h1 id="2-关键技术"><a href="#2-关键技术" class="headerlink" title="2 关键技术"></a>2 关键技术</h1><h2 id="2-1-目录树的生成"><a href="#2-1-目录树的生成" class="headerlink" title="2.1 目录树的生成"></a>2.1 目录树的生成</h2><p>根据用户的登录信息得到属于该用户的项目名称及项目文件所在路径，然后根据geoserver提供的fileserver接口，使用getdir方法得到每一个项目所拥有的文件路径。<br>若当前用户没有项目，就为其创建一个默认的项目，包含基本的文件结构：index.html文件、css文件夹、js文件夹、imgs文件夹和libs文件夹。<br>如果项目的数量特别大，需要多次的循环，为了防止长时间运行脚本，造成运行阻塞，用户无法与页面进行交互，需要对其使用数组分块技术，基本的思路是：使用定时器处理数组的一小部分，接着再设置另一个定时器，调用arguments.callee处理小一小块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> start = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> item = array.shift();</span><br><span class="line">        process(item);</span><br><span class="line">    &#125;<span class="keyword">while</span>(array.length &gt; <span class="number">0</span> &amp;&amp; (+<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(array.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        setTimeout(<span class="built_in">arguments</span>.callee,<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
<p>将文件路径转换为节点的格式，每个节点包含id、pId、name、isParent等信息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zNode = &#123; id:zNodeId, pId:parentId, name:dirArr[i],isParent :isParent, open:openFlag, owner:dirArr[<span class="number">0</span>] &#125;;</span><br></pre></td></tr></table></figure></p>
<p>最后将得到的节点信息绑定到所在的ztree元素的id上，并为其设定相应的点击事件、双击事件及右键点击事件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.fn.zTree.init($(<span class="string">"#"</span>+id), setting, zNodes);</span><br></pre></td></tr></table></figure></p>
<h2 id="2-2-编辑窗口与目录树关联"><a href="#2-2-编辑窗口与目录树关联" class="headerlink" title="2.2 编辑窗口与目录树关联"></a>2.2 编辑窗口与目录树关联</h2><p>点击目录树到编辑窗口打开文件，使用了自定义事件绑定方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">addCustomEvt: <span class="function"><span class="keyword">function</span> (<span class="params">evtName,callback</span>)</span>&#123; <span class="comment">//用于注册事件处理程序</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.events[evtName])&#123;</span><br><span class="line">        <span class="keyword">this</span>.events[evtName] = [callback];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.events[evtName].push(callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">trigger: <span class="function"><span class="keyword">function</span> (<span class="params">evtName,argsArr</span>)</span>&#123;        <span class="comment">//用于触发事件</span></span><br><span class="line">    <span class="keyword">var</span> callbackArr = <span class="keyword">this</span>.events[evtName];</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>.length &gt;<span class="number">1</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>]:[];</span><br><span class="line">    <span class="keyword">if</span>(callbackArr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=callbackArr.length;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> fun = callbackArr[i];</span><br><span class="line">            fun.apply(<span class="literal">null</span>,args);</span><br><span class="line">        &#125;                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这种观察者的设计模式，由观察者及主体构成。观察者能够订阅事件即注册回调事件，在主文件中注册打开文件的事件处理程序，openFile函数执行的就是在编辑窗口请求并打开指定的文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cataMod.addCustomEvt(<span class="string">'open'</span>,openFile);</span><br></pre></td></tr></table></figure></p>
<p>主体触发事件，在目录树的点击事件中，触发打开文件的事件。</p>
<pre><code class="javascript">catalog.trigger(<span class="string">'open'</span>,args);
</code></pre>
<p>打开指定文件使用的是geoserver服务器提供的fileserver接口，使用getfile方法得到当前路径的文件内容。请求文件时在请求的URL中加上时间戳参数，保证每次请求的文件都是从服务器上获取的最新文件，而不是从浏览器的缓存中读取的。最后在标签栏里添加文件名标签，并用CodeMirror提供的setValue()方法填充代码窗口。</p>
<h2 id="2-3-项目管理"><a href="#2-3-项目管理" class="headerlink" title="2.3 项目管理"></a>2.3 项目管理</h2><h3 id="2-3-1-新建项目"><a href="#2-3-1-新建项目" class="headerlink" title="2.3.1 新建项目"></a>2.3.1 新建项目</h3><p>为项目添加默认目录结构，创建默认html文件，并包含基础的html结构，保存为字符串，使用encodeURIComponent()方法将字符串进行编码，作为URI的con参数，新建文件使用geoserver服务器fileserver接口的putstring方法。<br>创建默认的文件夹，使用fileserver接口mkdir方法新建css文件夹、js文件夹、imgs文件夹和libs文件夹。<br>最后利用WebsqlScript接口为用户在数据库中添加一条记录。</p>
<h3 id="2-3-2-新建文件"><a href="#2-3-2-新建文件" class="headerlink" title="2.3.2 新建文件"></a>2.3.2 新建文件</h3><p>新建文件后需要在目录树中增加一个新的节点，使用zTree.addNodes(pNode,zNode)添加节点，zTree.expandNode(zNode)将节点展开，并用zTree.selectNode(thisZNode)将该节点设为选中状态。<br>在编辑窗口添加一个新的文件标签，并将不同类型文件的默认内容更新到<code>&lt;textarea&gt;</code><br>标签中。若新建的文件类型为js或css，则在对应的网页文档的<code>&lt;head&gt;</code>标签中插入<code>&lt;script&gt;</code>标签或<code>&lt;link&gt;</code>标签。</p>
<h3 id="2-3-3-删除文件"><a href="#2-3-3-删除文件" class="headerlink" title="2.3.3 删除文件"></a>2.3.3 删除文件</h3><p>使用fileserver接口delete方法删除文件；利用ztree的removeNode()方法移除节点；然后判断当前文件是否在代码编辑窗口中打开，若打开则判断编辑窗口中可见的文件是否为要删除的文件，否的话直接删除文件的标签页和在对象中存储的信息，是的话则先判断当前标签页是否有下一个nodeType为1的同级节点元素并作为下一个要打开的文件，否则判断当前标签页是否有上一个nodeType为1的同级节点元素并作为下一个要打开的文件。</p>
<h3 id="2-3-4-下载文件"><a href="#2-3-4-下载文件" class="headerlink" title="2.3.4 下载文件"></a>2.3.4 下载文件</h3><p>首先将要下载的文件或文件夹通过fileserver接口dozip方法另存为一个zip格式的压缩文件；创建一个不可见的<code>&lt;iframe&gt;</code>标签，将<code>&lt;iframe&gt;</code>标签的src指向另存文件的路径；最后将标签加到文档中document.body.appendChild(elemIF)。</p>
<h3 id="2-4-压缩文件上传"><a href="#2-4-压缩文件上传" class="headerlink" title="2.4 压缩文件上传"></a>2.4 压缩文件上传</h3><p>为更好地满足用户的需要，我们利用 HTML5 提供的 File API 实现上传文件的功能。Javascript 通过 File API 提供的 File、FileList、Blob 接口便可以读取本地文件。在 html5 中， File 对象支持选择多个文件， 用户选择了某些文件之后，便会触发 file 类型的 input 元素的 onchange 事件句柄。File 对象中包含了文件 的所有可访问信息，而不仅仅是文件名。</p>
<p>File API 还提供了一个异步读取文件的接口——FileReader，利用该接口我们可以异步地将文件内容 加载到内存中，赋予某个 js 变量。FileReader 包含了一套完整的事件模型，用于捕获读取文件时的状态 如 onabort (中断)、onerror (出错)、onloadstart (开始)、onprogress (正在读取)、onload (成功读取)等。 基于 FileReader，我们编写了用于多文件上传的 js 类库 gUpload.js，实现本地文件的读取、变量的处理、文件上传至服务器。</p>
<p>上传文件后在目录树中添加新的节点 ；若在根目录下上传则在数据库中添加一条记录；若上传的文件为压缩文件，geoserver会自动将文件解压到同级目录下，因此还需则将同级目录下的同名文件转换为节点添加到目录树中。</p>
<h2 id="2-5-运行结果实时显示"><a href="#2-5-运行结果实时显示" class="headerlink" title="2.5 运行结果实时显示"></a>2.5 运行结果实时显示</h2><p>代码编辑窗口使用了<code>&lt;textarea&gt;</code>标签，在使用CodeMirror.fromTextArea()方法初始化编辑器对象时传入该标签元素，并设置相应的参数。运行结果的显示使用的是<code>&lt;iframe&gt;</code>标签。<br>在代码编辑窗口编写完代码后，利用CodeMirror提供的getValue方法得到当前文件的内容，并保存到服务器中。再使用getMode方法判断当前文件类型，若非网页文档则找到当前文件对应的html文件的路径。最后将iframe的src属性指向html文件所在路径并加上随机数作为参数，就可以实现运行结果实时显示在页面中的效果。</p>
<h1 id="3-存在的不足"><a href="#3-存在的不足" class="headerlink" title="3 存在的不足"></a>3 存在的不足</h1><h2 id="3-1-编辑同一个文件存在冲突"><a href="#3-1-编辑同一个文件存在冲突" class="headerlink" title="3.1 编辑同一个文件存在冲突"></a>3.1 编辑同一个文件存在冲突</h2><p>当进行协同开发时，多个用户可能同时编辑同一个文件，这时候就极有可能出现冲突，若某个用户修改了文档中的某一部分并对其进行保存，而这时候另一个用户修改了文档中的另一部分并保存，这时候前一个用户修改的内容就会被后一个用户所覆盖。因此之后要考虑在后台将提交的字符串与后台文件合并的功能。</p>
<h2 id="3-2-没有错误提示"><a href="#3-2-没有错误提示" class="headerlink" title="3.2 没有错误提示"></a>3.2 没有错误提示</h2><p>目前查看错误只能通过打开浏览器的控制台的方式，这样不便于开发，接下来可以考虑将错误提示直接显示在系统中，更加方便用户进行开发。</p>
<h1 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h1><h2 id="1）工具介绍"><a href="#1）工具介绍" class="headerlink" title="1）工具介绍"></a>1）工具介绍</h2><ul>
<li>新建项目：输入项目名后，自动新建一个默认目录结构的项目。</li>
<li>新建js：选择所在项目，输入文件名，即新建js文件。</li>
<li>新建css：选择所在项目，输入文件名，即新建css文件。</li>
<li>第三方库：点击选择需要引入的库，即自动在当前打开的html文件的head标签中插入第三方库的路径，再次点击可取消引入。</li>
<li>保存：修改文件后，标签的图标会变为红点，点击保存后，文件保存到服务器，图标变为红色关闭按钮。</li>
<li>运行：点击“运行”按钮后，可在右边看到运行后的结果。</li>
<li>发布：点击“发布”按钮后，浏览器再打开一个标签页显示运行结果。</li>
<li>帮助：点击“帮助”按钮后，查询帮助文档。</li>
<li>类库文档：跳转到ccgis类库的说明文档。</li>
<li>注销：在界面右上角显示用户名和注销按钮，点击注销按钮后，页面跳转到登录界面。</li>
</ul>
<h2 id="2）快捷键说明"><a href="#2）快捷键说明" class="headerlink" title="2）快捷键说明"></a>2）快捷键说明</h2><ul>
<li>Ctrl+Q：自动补全</li>
<li>Ctrl+F：查找全部匹配的结果</li>
<li>Alt+F：逐个跳到匹配的结果，</li>
<li>enter：跳到下一个匹配结果，</li>
<li>shift+enter：找到上一个匹配的结果</li>
<li>Ctrl+H：替换</li>
<li>Ctrl+L：选中一行，可以删除</li>
<li>Ctrl+/: 注释掉选中的区域</li>
<li>Ctrl+D: 同时选中多个匹配结果</li>
<li>Shift-Ctrl-[：折叠</li>
<li>Shift-Ctrl-]：展开折叠区域</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ccgis移动版]]></title>
      <url>http://yoursite.com/2016/08/09/ccgis%E7%A7%BB%E5%8A%A8%E7%89%88/</url>
      <content type="html"><![CDATA[<h1 id="1-系统设计"><a href="#1-系统设计" class="headerlink" title="1.系统设计"></a>1.系统设计</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>对地图工作空间的管理及展示、发表评论、点赞，能够集成第三方地图、定位、拍照及上传照片、记录路线轨迹，提供了用户信息管理功能，实现了全国空气质量图表展示专题模块。<br>网址：<a href="https://ccgis.cn/mapb/mobile/home/" target="_blank" rel="external">https://ccgis.cn/mapb/mobile/home/</a></p>
<h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><p>系统分为以下五个功能模块，分别是首页、地图数据管理、地图模块、属性数据管理、用户信息管理，如图所示。<br><img src="http://i4.piimg.com/567571/393cadbc34024884.png" alt=""></p>
<h2 id="代码文件组织"><a href="#代码文件组织" class="headerlink" title="代码文件组织"></a>代码文件组织</h2><p>在mobile文件夹下包含以下文件夹：common（存放公共的类库、图片等）、home（首页）、mapmgr（地图数据管理模块）、mapmodule（地图模块）、tablemgr（属性数据管理模块）、usermgr（用户信息管理模块）。<br>每个模块文件夹下包含：common（模块需要的公共资源）、modules（该模块下的子模块）、index.html（网页文档）。</p>
<h1 id="2-关键技术"><a href="#2-关键技术" class="headerlink" title="2.关键技术"></a>2.关键技术</h1><h2 id="2-1-适配不同分辨率的设备"><a href="#2-1-适配不同分辨率的设备" class="headerlink" title="2.1 适配不同分辨率的设备"></a>2.1 适配不同分辨率的设备</h2><p>为了适配不同型号的移动终端，需使用viewport动态设置页面宽度。使用方法如下：在网页的head页面元素中加入meta标签。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name="viewport" content="width=device-width,initial-scale=1.0,</span><br><span class="line">maximum-scale=1.0, user-scalable=0"&gt;</span><br></pre></td></tr></table></figure></p>
<p>该<meta>标签的作用是让当前viewport的宽度等于设备的宽度，页面第一次加载时的缩放比例为1，同时不允许用户手动缩放。</p>
<h2 id="2-2-空气质量图表展示"><a href="#2-2-空气质量图表展示" class="headerlink" title="2.2 空气质量图表展示"></a>2.2 空气质量图表展示</h2><p>利用百度API提供的BMap.LocalCity获取用户当前所在城市，通过逻辑判断获取数据库最新的当前城市的空气质量数据。仪表盘是用来表示当前城市空气质量指数平均值及所属污染级别。利用series将仪表盘的区间范围设置为[0,500]，以10段进行分割，用绿色（#32f43e）、黄色（#e4f33e）、橙色（#e4993c）、红色（#f60003）、紫色（#9f034c）、褐红色（#800025）6种颜色将10段划为空气质量级别对应的优、良、轻度污染、中度污染、重度污染和严重污染。</p>
<p>热力图是基于Canvas的，因此在使用热力图之前需要利用isSupportCanvas判断浏览器是否支持Canvas，然后需要生成一个百度地图实例map，在已经生成的地图上将热力图叠加上去即可，其中传入的参数points为用户选择的空气质量指标对应的包含站点经纬度及指标值的对象数组。</p>
<h2 id="2-3-用户评论、点赞"><a href="#2-3-用户评论、点赞" class="headerlink" title="2.3 用户评论、点赞"></a>2.3 用户评论、点赞</h2><p>1、用户评论实现思路：在g_usercomment表中插入一条记录；判断评论总数表中是否有该地图的记录，有就更新g_usercommentNum表中该条记录，否则插入一条新的记录。<br><img src="http://i2.piimg.com/567571/6d25c1f00a3ce09e.png" alt=""></p>
<p>2、用户点赞实现思路：查询g_userpraise表中是否有该用户为该地图点赞的记录，有的话则删除该记录，并更新g_userpraiseNum表中对应记录点赞数减1；若没有记录，则在g_userpraise表添加一条记录，并判断g_userpraiseNum（点赞总数表）中是否有该地图的记录，有就更新g_userpraiseNum表中该条记录，否则插入一条新的记录。</p>
<h2 id="2-4-定位、逆地理编码"><a href="#2-4-定位、逆地理编码" class="headerlink" title="2.4 定位、逆地理编码"></a>2.4 定位、逆地理编码</h2><h3 id="2-4-1-地图定位"><a href="#2-4-1-地图定位" class="headerlink" title="2.4.1 地图定位"></a>2.4.1 地图定位</h3><p>1、利用HTML5 geolocation服务的getCurrentPosition方法获取经纬度，使用之前检测浏览器是否支持HTML5 geolocation。<br>2、获取位置成功后，若为上海地图则转为上海坐标，实例化一个标注加到地图上并zoomTo到该位置；若不是则直接添加标注和zoomTo到该位置。</p>
<h3 id="2-4-2-逆地理编码"><a href="#2-4-2-逆地理编码" class="headerlink" title="2.4.2 逆地理编码"></a>2.4.2 逆地理编码</h3><p>1、将之前获取的经纬度坐标转为百度地图上的经纬度，接口由<a href="http://www.zdoz.net/apiList.html" target="_blank" rel="external">zdoz</a>提供。<br>2、利用百度地图API反地理编码得到该经纬度对应的地址信息：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myGeo = <span class="keyword">new</span> BMap.Geocoder();</span><br></pre></td></tr></table></figure></p>
<p><img src="http://i2.piimg.com/567571/a8f24b21fb87db9d.png" alt=""></p>
<h2 id="2-5-拍照"><a href="#2-5-拍照" class="headerlink" title="2.5 拍照"></a>2.5 拍照</h2><p>在移动端实现拍照或选取相册使用的是类型为file的input标签，但是不需要使用其默认的样式，因此将input标签css样式的透明度opacity设置为0，并在其上覆盖其他元素。<br>触发了file类型的input元素的onchange事件后，通过File API提供的异步读取文件的接口FileReader，使用readAsDataURL方法读取文件内容。<br>在上传图片之前，为了实现图片的预览，使用createObjectURL方法（也可使用FileReader对象的readAsDataURL方法），该方法可创建一个新的对象URL，通过这个URL可以获取到传入的file对象或blob对象的完整内容,然后将图片元素的src属性指向这个URL，实现图片预览功能：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line"><span class="keyword">var</span> blob = URL.createObjectURL(files[<span class="number">0</span>]);</span><br><span class="line">$(<span class="string">"#firstImg"</span>).attr(<span class="string">"src"</span>,blob);</span><br></pre></td></tr></table></figure></p>
<p>使用geoserver服务器fileserver接口的putbase64方法，将文件上传到服务器中，并在数据库中记录相关信息，包括：用户ID、经纬度、描述信息、图片存放的路径和时间。<br><img src="http://i2.piimg.com/567571/e07a00837c1f0786.png" alt=""></p>
<h2 id="2-6-记录路线轨迹"><a href="#2-6-记录路线轨迹" class="headerlink" title="2.6 记录路线轨迹"></a>2.6 记录路线轨迹</h2><p>开启记录轨迹模式后，每隔3秒记录下当前用户所在位置，可暂定记录，也可继续开启该模式，还可以将记录的轨迹上传到服务器供下次查看。</p>
<p>首先需要判断浏览器是否支持HTML5的geolocation，若不支持或获取位置失败则根据错误类型给出相应的提示。利用 navigator.geolocation对象的getCurrentPosition方法获取用户位置，并利用setInterval每隔3秒获取一次（可改为直接使用watchPosition方法，而不需要使用间隔调用）。</p>
<p>获取到用户位置信息后记录下经纬度数据，若是第一次获取实例化一个标注点添加到地图上，并将地图缩放到该点的位置；之后每次调用判断当前记录的位置信息和上一次记录的经纬度是否相同，如果不同就记录下该点位置，并绘制路线：根据所记录的位置实例化一个线要素，并根据第一个和最后一个点的位置信息实例化起点和终点的标注点。判断最后一个点是否在屏幕中间区域，即（x坐标是否位于地图宽度的1/4到3/4处，y坐标是否位于地图高度的1/4到3/4处），如果不是则将地图缩放到最后一个点为中心的位置。</p>
<p>暂定或取消记录轨迹，就是利用clearInterval命令取消固定时间调用获取位置函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.intervalID) &#123; <span class="built_in">window</span>.clearInterval(<span class="keyword">this</span>.intervalID);&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://i2.piimg.com/567571/1160660fcecab6f1.png" alt=""></p>
<h1 id="3-系统展示"><a href="#3-系统展示" class="headerlink" title="3.系统展示"></a>3.系统展示</h1><h2 id="模块名称：首页"><a href="#模块名称：首页" class="headerlink" title="模块名称：首页"></a>模块名称：首页</h2><p><img src="http://i2.piimg.com/567571/e0a41a2547baa7cf.jpg" alt=""></p>
<h2 id="模块名称：地图数据管理"><a href="#模块名称：地图数据管理" class="headerlink" title="模块名称：地图数据管理"></a>模块名称：地图数据管理</h2><p><img src="http://i1.piimg.com/567571/286e3300f966c9a8.jpg" alt=""></p>
<h2 id="模块名称：地图模块"><a href="#模块名称：地图模块" class="headerlink" title="模块名称：地图模块"></a>模块名称：地图模块</h2><p><img src="http://i1.piimg.com/567571/7b079be8cd6be723.jpg" alt=""><br><img src="http://i1.piimg.com/567571/064c6133f85036d9.jpg" alt=""></p>
<h2 id="模块名称：用户信息管理模块"><a href="#模块名称：用户信息管理模块" class="headerlink" title="模块名称：用户信息管理模块"></a>模块名称：用户信息管理模块</h2><p><img src="http://i1.piimg.com/567571/5a7d157b99f11f5a.jpg" alt=""></p>
<h1 id="4-存在的不足"><a href="#4-存在的不足" class="headerlink" title="4.存在的不足"></a>4.存在的不足</h1><h2 id="4-1-属性数据查看"><a href="#4-1-属性数据查看" class="headerlink" title="4.1 属性数据查看"></a>4.1 属性数据查看</h2><p>进一步实现表格形式的属性数据查看，可以查看一副地图所具有的所有属性数据。还可增加点查功能，点击某个要素后弹出与该要素相关的属性数据。</p>
<h2 id="4-2-分享功能"><a href="#4-2-分享功能" class="headerlink" title="4.2 分享功能"></a>4.2 分享功能</h2><p>增加地图或者数据的分享功能，与pc端模式保持一致。还可以提供链接的形式分享，可供更多的用户查看、使用。</p>
<h2 id="4-3-权限管理"><a href="#4-3-权限管理" class="headerlink" title="4.3 权限管理"></a>4.3 权限管理</h2><p>考虑我们平台的受众群体，如果是开放的、面向大众的，可使用微信平台提供的接口，实现更智能的权限管理，只要用户微信授权后即可登录系统，免去了登录的繁琐过程。</p>
<h2 id="4-4-改进样式写法"><a href="#4-4-改进样式写法" class="headerlink" title="4.4 改进样式写法"></a>4.4 改进样式写法</h2><h3 id="4-4-1-使用rem单位开发"><a href="#4-4-1-使用rem单位开发" class="headerlink" title="4.4.1 使用rem单位开发"></a>4.4.1 使用rem单位开发</h3><p>系统开发时字体大小使用的是以px作为单位，而这对于不同屏幕分辨率的设备以及横竖屏的情况，大小始终保持不变，无法实现字体大小的屏幕自适应。在css3中引入了rem的概念，rem是相对于根元素<code>&lt;html&gt;</code>来设置字体大小。通过rem单位，实现字体的自适应。</p>
<h3 id="4-4-2-使用icon-font"><a href="#4-4-2-使用icon-font" class="headerlink" title="4.4.2 使用icon font"></a>4.4.2 使用icon font</h3><p>图标主要使用的都是<code>&lt;img&gt;</code>标签，而且基本上都是使用单个图片文件，没有合并成CSS Sprite，这样增加了HTTP请求的次数。可以考虑使用IconFont技术，使用字体文件取代图片文件，这种方式减轻了HTTP请求的负担，而且文件更加容易编辑和维护。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript的setter getter方法总结]]></title>
      <url>http://yoursite.com/2016/08/04/javascript%E7%9A%84setter%20getter%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>javascript的setter getter方法一共有五种实现方式</p>
<ul>
<li>1.通过对象初始化器定义</li>
<li>2.使用 Object.create 方法</li>
<li>3.使用 Object.defineProperty 方法</li>
<li>4.使用 Object.defineProperties 方法</li>
<li>5.使用 Object.prototype.<strong>defineGetter</strong> 以及 Object.prototype.<strong>defineSetter</strong> 方法</li>
</ul>
<h2 id="1-通过对象初始化器定义"><a href="#1-通过对象初始化器定义" class="headerlink" title="1.通过对象初始化器定义"></a>1.通过对象初始化器定义</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a : <span class="number">8</span>,</span><br><span class="line">    get b()&#123;<span class="keyword">return</span> <span class="keyword">this</span>.a +<span class="number">1</span>;&#125;,<span class="comment">//通过 get,set的 b,c方法间接性修改 a 属性</span></span><br><span class="line">    set c(x)&#123;<span class="keyword">this</span>.a = x/<span class="number">2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//9</span></span><br><span class="line">o.c = <span class="number">50</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//25</span></span><br></pre></td></tr></table></figure>
<p>我们试着将get set的方法改写成同名,结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a : <span class="number">8</span>,</span><br><span class="line">    get b()&#123;<span class="keyword">return</span> <span class="keyword">this</span>.a +<span class="number">1</span>;&#125;,</span><br><span class="line">    set b(x)&#123;<span class="keyword">this</span>.a = x/<span class="number">2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//9</span></span><br><span class="line">o.b = <span class="number">50</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//25</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//26</span></span><br></pre></td></tr></table></figure>
<p>es6中的新语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="string">"bb"</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"cc"</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    _a : <span class="number">8</span>,</span><br><span class="line">    get [b]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>._a +<span class="number">1</span>;&#125;,</span><br><span class="line">    set [c](x)&#123;<span class="keyword">this</span>._a = x/<span class="number">2</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o._a);<span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(o[b]);<span class="comment">//9</span></span><br><span class="line">o[<span class="string">"cc"</span>] = <span class="number">50</span>;<span class="comment">//等同于o.c = 50;</span></span><br><span class="line"><span class="built_in">console</span>.log(o._a);<span class="comment">//25</span></span><br></pre></td></tr></table></figure>
<h2 id="2-使用-Object-create-方法"><a href="#2-使用-Object-create-方法" class="headerlink" title="2.使用 Object.create 方法"></a>2.使用 <code>Object.create</code> 方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; a: <span class="number">10</span> &#125;;</span><br><span class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</span><br><span class="line">    bar: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o.a;<span class="comment">//或者this.a结果一样</span></span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.a = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.bar); <span class="comment">//undefined</span></span><br><span class="line">o.bar = <span class="number">12</span>; </span><br><span class="line"><span class="built_in">console</span>.log(o.bar); <span class="comment">//12</span></span><br></pre></td></tr></table></figure>
<h2 id="3-使用-Object-defineProperty-方法"><a href="#3-使用-Object-defineProperty-方法" class="headerlink" title="3.使用 Object.defineProperty 方法"></a>3.使用 <code>Object.defineProperty</code> 方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; a: <span class="number">10</span> &#125; <span class="comment">//声明一个对象,包含一个 a 属性,值为1</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"b"</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//10</span></span><br><span class="line">o.b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<h2 id="4-使用-Object-defineProperties-方法"><a href="#4-使用-Object-defineProperties-方法" class="headerlink" title="4.使用 Object.defineProperties 方法"></a>4.使用 <code>Object.defineProperties</code> 方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; a: <span class="number">1</span>, b: <span class="string">"sss"</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">    <span class="string">"A"</span>: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">this</span>.a = val; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"B"</span>: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.b + <span class="number">2</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">this</span>.b = val &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.A);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.B);<span class="comment">//sss2</span></span><br><span class="line">obj.A = <span class="number">3</span>;</span><br><span class="line">obj.B = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.A);<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.B);<span class="comment">//hello2</span></span><br></pre></td></tr></table></figure>
<h2 id="5-使用Object-prototype-defineGetter-以及-Object-prototype-defineSetter-方法"><a href="#5-使用Object-prototype-defineGetter-以及-Object-prototype-defineSetter-方法" class="headerlink" title="5.使用Object.prototype.__defineGetter__ 以及 Object.prototype.__defineSetter__ 方法"></a>5.使用<code>Object.prototype.__defineGetter__</code> 以及 <code>Object.prototype.__defineSetter__</code> 方法</h2><p>这两种方法是非标准，最好不要在开发中使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; _a: <span class="number">1</span> &#125;;</span><br><span class="line">o.__defineGetter__(<span class="string">"a"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._a;</span><br><span class="line">&#125;);</span><br><span class="line">o.__defineSetter__(<span class="string">"a"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._a = val;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//1</span></span><br><span class="line">o.a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS3--font-face使用]]></title>
      <url>http://yoursite.com/2016/08/04/CSS3--font-face%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><ul>
<li>@font-face是CSS3中的一个模块，主要是把自己定义的Web字体嵌入到你的网页中，不用担心兼容性，@font-face在IE4中都支持。</li>
<li>如果是用字体做logo，英文的话字体和图片占用大小差不多，但是中文的字体包一般比较大，最好还是使用图片的形式。</li>
</ul>
<h2 id="为什么要将icon做成字体？"><a href="#为什么要将icon做成字体？" class="headerlink" title="为什么要将icon做成字体？"></a>为什么要将icon做成字体？</h2><p>字体文件小，一般20-50kb； 容易编辑和维护，尺寸和颜色可以用css来控制； 透明完全兼容IE6；当然，Icon Font也是有缺点的，由于是字体，所以只支持图片上是纯色的，多种颜色的就不支持了。</p>
<h2 id="各个浏览器对字体格式的支持是最大的区别："><a href="#各个浏览器对字体格式的支持是最大的区别：" class="headerlink" title="各个浏览器对字体格式的支持是最大的区别："></a>各个浏览器对字体格式的支持是最大的区别：</h2><p>webkit/safari：支持TrueType/OpenType(.ttf)，OpenType PS(.otf)，iOS4.2+支持.ttf，iOS 4.2以下只支持SVG字体；<br>Chrome：除webkit支持的以外，从Chrome 6开始，开始支持woff格式；<br>Firefox：支持.ttf和.otf，从Firefox 3.6开始支持woff格式；<br>Opera：支持.ttf、.otf、.svg。Opera 11开始支持WOFF； IE：只支持eot格式，IE9开始支持woff。</p>
<h1 id="2-快速实践"><a href="#2-快速实践" class="headerlink" title="2.快速实践"></a>2.快速实践</h1><ul>
<li><a href="http://www.dafont.com/" target="_blank" rel="external">下载字体</a>需要格式为.tff格式的字体文件</li>
<li>搜索Webfont Generator，或者直接使用<a href="https://www.web-font-generator.com/" target="_blank" rel="external">该网站</a>提供的服务。这很简单，进入网站后选择.tff字体文件上传，勾选同意的复选框，点击<code>Generate web font</code>，点击<code>Download Package</code>下载，解压缩文件。</li>
<li>使用<br>新建index.css</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Happy-Camper-Regular'</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.eot'</span>);</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.svg#SingleMaltaRegular'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-class">.demo</span> &#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: <span class="string">'Happy-Camper-Regular'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>字体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span>hello world!You are my Destiny<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="3-字体icon"><a href="#3-字体icon" class="headerlink" title="3.字体icon"></a>3.字体icon</h1><p>使用某些字体，如：<code>WebSymbols-Regular</code><a href="http://pan.baidu.com/s/1jIO0Y2q" target="_blank" rel="external">百度云下载地址</a>，<code>Guifx</code>字体，包括现在开源的比较流行的<code>Font Awesome</code>,使用方法同上。在html文件中如下示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>A<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>B<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>C<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>D<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>F<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每一行显示的是其对应的图标<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/font-icon.png" alt=""></p>
<p>参考文献：</p>
<ul>
<li><a href="http://www.dafont.com/" target="_blank" rel="external">下载字体的地方</a></li>
<li><a href="http://www.w3cplus.com/content/css3-font-face" target="_blank" rel="external">CSS3 @font-face</a></li>
<li><a href="http://www.w3cplus.com/css3/web-icon-with-font-face" target="_blank" rel="external">@font-face制作Web Icon</a></li>
</ul>
<p>附在线icon font字体图标库：<br><a href="http://www.weste.net/2013/12-13/94697.html" target="_blank" rel="external">http://www.weste.net/2013/12-13/94697.html</a><br><a href="http://www.iconfont.cn/?spm=a313x.7781069.0.0.pICV51" target="_blank" rel="external">http://www.iconfont.cn/?spm=a313x.7781069.0.0.pICV51</a> 阿里巴巴矢量图标<br><a href="https://www.fontsquirrel.com/tools/webfont-generator" target="_blank" rel="external">https://www.fontsquirrel.com/tools/webfont-generator</a><br><a href="http://fontello.com/" target="_blank" rel="external">http://fontello.com/</a><br><a href="https://icomoon.io/app/#/select" target="_blank" rel="external">https://icomoon.io/app/#/select</a><br><a href="http://glyphicons.com/" target="_blank" rel="external">http://glyphicons.com/</a><br><a href="http://fontawesome.io/" target="_blank" rel="external">http://fontawesome.io/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[现代web前端开发工具和流程]]></title>
      <url>http://yoursite.com/2016/08/04/%E7%8E%B0%E4%BB%A3web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%92%8C%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1.版本控制"></a>1.版本控制</h1><ul>
<li><strong>SVN</strong> </li>
<li><strong>GIT</strong><br>推荐使用git，git安装和图形化界面tortoiseGit安装，<a href="http://www.cnblogs.com/peterzd/archive/2012/04/22/2465230.html" target="_blank" rel="external">git与github联系</a>不在本文的讨论范围，请自行搜索。<br>在github中新建一个项目<br>在本地使用图形Git–&gt;git clone<br>或者使用命令：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone  git:<span class="comment">//github.com/someone/some_project.git</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>文件夹就是我们的项目文件夹。</p>
<h1 id="2-前端自动化"><a href="#2-前端自动化" class="headerlink" title="2.前端自动化"></a>2.前端自动化</h1><ul>
<li><strong><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp</a></strong></li>
<li><strong><a href="http://www.gruntjs.net/" target="_blank" rel="external">grunt</a></strong></li>
</ul>
<h2 id="2-1-gulp"><a href="#2-1-gulp" class="headerlink" title="2.1 gulp"></a>2.1 <a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp</a></h2><p>Gulp通过流和代码优于配置策略来尽量简化任务编写的工作。当使用流时，Gulp去除了中间文件，只将最后的输出写入磁盘，整个过程因此变得更快。</p>
<h3 id="2-1-1-安装命令行工具"><a href="#2-1-1-安装命令行工具" class="headerlink" title="2.1.1 安装命令行工具"></a>2.1.1 安装命令行工具</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-创建好package-json文件（包管理文件）-安装局部gulp"><a href="#2-1-2-创建好package-json文件（包管理文件）-安装局部gulp" class="headerlink" title="2.1.2 创建好package.json文件（包管理文件）,安装局部gulp"></a>2.1.2 创建好package.json文件（包管理文件）,安装局部gulp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure>
<p>下载的包会存放在项目的node_modules文件夹下<br>包依赖会加入到<code>package.json</code>中:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-1-3-新建gulpfile-js文件"><a href="#2-1-3-新建gulpfile-js文件" class="headerlink" title="2.1.3 新建gulpfile.js文件"></a>2.1.3 新建gulpfile.js文件</h3><h4 id="四个主要API"><a href="#四个主要API" class="headerlink" title="四个主要API"></a>四个主要API</h4><ul>
<li>gulp.task(name[, deps], fn)：注册任务</li>
<li>gulp.src(globs[, options])：指明源文件路径</li>
<li>gulp.dest(path)：指明任务处理后的目标输出路径</li>
<li>gulp.watch(glob[, options], tasks)／gulp.watch(glob[, options, cb])：监视文件的变化并运行相应的任务。</li>
</ul>
<p>实例见<code>3.2 在gulpfile.js中配置</code>。</p>
<h3 id="2-1-4-运行"><a href="#2-1-4-运行" class="headerlink" title="2.1.4 运行"></a>2.1.4 运行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure>
<h2 id="2-2-grunt"><a href="#2-2-grunt" class="headerlink" title="2.2 grunt"></a>2.2 <a href="http://www.gruntjs.net/" target="_blank" rel="external">grunt</a></h2><h3 id="2-2-1-安装-grunt-cli"><a href="#2-2-1-安装-grunt-cli" class="headerlink" title="2.2.1 安装 grunt-cli"></a>2.2.1 安装 grunt-cli</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-cli -g</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-配置grunt"><a href="#2-2-2-配置grunt" class="headerlink" title="2.2.2 配置grunt"></a>2.2.2 配置grunt</h3><p>在项目中添加两份文件：package.json 和 Gruntfile。</p>
<ul>
<li>package.json //项目自动化所依赖的相关插件。</li>
<li>Gruntfile.js //项目自动化工作流配置文件。</li>
</ul>
<h4 id="安装Grunt-和-grunt插件"><a href="#安装Grunt-和-grunt插件" class="headerlink" title="安装Grunt 和 grunt插件"></a>安装Grunt 和 grunt插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt --save-dev</span><br><span class="line">npm install grunt-contrib-jshint --save-dev</span><br></pre></td></tr></table></figure>
<h4 id="配置Gruntfile-js文件"><a href="#配置Gruntfile-js文件" class="headerlink" title="配置Gruntfile.js文件"></a>配置Gruntfile.js文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Project configuration.</span></span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">    uglify: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        banner: <span class="string">'/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */\n'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      build: &#123;</span><br><span class="line">        src: <span class="string">'src/&lt;%= pkg.name %&gt;.js'</span>,</span><br><span class="line">        dest: <span class="string">'build/&lt;%= pkg.name %&gt;.min.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载包含 "uglify" 任务的插件。</span></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认被执行的任务列表。</span></span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-运行"><a href="#2-2-3-运行" class="headerlink" title="2.2.3 运行"></a>2.2.3 运行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt</span><br></pre></td></tr></table></figure>
<h1 id="3-SASS"><a href="#3-SASS" class="headerlink" title="3.SASS"></a>3.SASS</h1><p>‘CSS预处理器’，它的基本思想是，用一种专门的编程语言，进行网页样式设计，然后再编译成正常的CSS文件。</p>
<h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-sass</span><br><span class="line">npm install --save-dev gulp-watch</span><br></pre></td></tr></table></figure>
<p><code>gulp-sass</code>是用来将SASS转化为CSS的，<code>gulp-watch</code>是用来观察文件修改的变化<br>我们来看<code>package.json</code>文件的变化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>:<span class="string">"^3.9.1"</span>,</span><br><span class="line">    <span class="string">"gulp-sass"</span>:<span class="string">"^2.3.1"</span>,</span><br><span class="line">    <span class="string">"gulp-watch"</span>:<span class="string">"^4.3.6"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-2-在gulpfile-js-中配置"><a href="#3-2-在gulpfile-js-中配置" class="headerlink" title="3.2 在gulpfile.js 中配置"></a>3.2 在<code>gulpfile.js</code> 中配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> path = &#123;</span><br><span class="line">    sass_isstudy:<span class="string">'./modules/istudy/sass/'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将你的默认的任务代码放在这</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(path.sass_isstudy+<span class="string">'*.scss'</span>)</span><br><span class="line">        .pipe(sass.sync().on(<span class="string">'error'</span>, sass.logError))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./modules/istudy/css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass:watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     gulp.watch(path.sass_isstudy+<span class="string">'*.scss'</span>, [<span class="string">'sass'</span>]);</span><br><span class="line">     <span class="comment">// gulp.watch('./modules/istudy/sass/*.scss').on('change',livereload);</span></span><br><span class="line">&#125;);   <span class="comment">//监控sass变化</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-命令执行"><a href="#3-3-命令执行" class="headerlink" title="3.3 命令执行"></a>3.3 命令执行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp sass:watch</span><br></pre></td></tr></table></figure>
<p>执行上诉命令，在sass文件修改、保存后，gulp就会将sass文件转化为css文件</p>
<h1 id="4-模块化编程"><a href="#4-模块化编程" class="headerlink" title="4.模块化编程"></a>4.模块化编程</h1><p>具体参见文章【javascript模块化编程】</p>
<h2 id="4-1-ES5时代"><a href="#4-1-ES5时代" class="headerlink" title="4.1 ES5时代"></a>4.1 <strong>ES5时代</strong></h2><p>以seajs为例：<br>CMD(Custom Module Definition)通用模块加载</p>
<h3 id="4-1-1-seajs"><a href="#4-1-1-seajs" class="headerlink" title="4.1.1 seajs"></a>4.1.1 seajs</h3><p><strong>引入seajs文件</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../../common/jsext/sea-debug.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>seajs 的简单配置</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">seajs.config(&#123;</span><br><span class="line">  base: <span class="string">"../sea-modules/"</span>,</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery/jquery/1.10.1/jquery.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 加载入口模块</span></span><br><span class="line">seajs.use(<span class="string">"../static/hello/src/main"</span>);<span class="comment">//入口</span></span><br></pre></td></tr></table></figure></p>
<p><strong>定义模块：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有模块都通过 define 来定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 require 引入依赖</span></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 exports 对外提供接口</span></span><br><span class="line">  exports.doSomething = ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 或者通过 module.exports 提供整个接口</span></span><br><span class="line">  <span class="built_in">module</span>.exports = ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="4-2-ES6时代"><a href="#4-2-ES6时代" class="headerlink" title="4.2 ES6时代"></a>4.2 <strong>ES6时代</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bar.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello "</span>+who;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;hello&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//foo.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;hello&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"zs"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">awe</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(bar.hello(name).toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;awe&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//baz.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar.hello(<span class="string">'张三'</span>));<span class="comment">//hello 张三</span></span><br><span class="line"></span><br><span class="line">foo.awe();<span class="comment">//HELLO ZS</span></span><br></pre></td></tr></table></figure>
<p>当然现在需要使用babel转成es5，并且要使用打包工具browserify webpack rollup 等才能直接在现在的浏览器上运行。</p>
<h1 id="5-组件化"><a href="#5-组件化" class="headerlink" title="5.组件化"></a>5.组件化</h1><p>组件化的思路是将一个模块独立开来，比如要写一个选择器按钮，将其分为三层：</p>
<p>  数据层：用来决定按钮个数以及按钮是否选择<br>  表现层：按钮使用现有的ui组件<br>  逻辑层：按钮事件等逻辑处理</p>
<p>参考阅读：</p>
<ul>
<li><a href="http://blog.csdn.net/sunboy_2050/article/details/7529022" target="_blank" rel="external">Git 常用命令详解</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="external">SASS用法指南-阮一峰</a></li>
<li><a href="http://www.w3cplus.com/" target="_blank" rel="external">SASS入门</a></li>
<li>[阮一峰-es6入门]（<a href="http://es6.ruanyifeng.com/）" target="_blank" rel="external">http://es6.ruanyifeng.com/）</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端模块化]]></title>
      <url>http://yoursite.com/2016/08/04/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="1-ES5时代"><a href="#1-ES5时代" class="headerlink" title="1 ES5时代"></a>1 <strong>ES5时代</strong></h2><h3 id="1-1-原生代码实现模块化"><a href="#1-1-原生代码实现模块化" class="headerlink" title="1.1 原生代码实现模块化"></a>1.1 原生代码实现模块化</h3><p><strong>1) 对象写法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">　　　　_count : <span class="number">0</span>,</span><br><span class="line">　　　　m1 : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;,</span><br><span class="line">　　　　m2 : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>2) 立刻执行函数</strong>(Immediately-Invoked Function Expression，IIFE) or 匿名闭包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line">　　　　<span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　<span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　<span class="keyword">return</span> &#123;</span><br><span class="line">　　　　　　m1 : m1,</span><br><span class="line">　　　　　　m2 : m2</span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　&#125;)();</span><br></pre></td></tr></table></figure></p>
<p>这样可以很好的保护私有变量，通过return来设置公开的方法。缺点也有: 动态添加方法的时候比较麻烦，且无法修改内部私有变量。<br><strong>3) 放大模式 or 宽放大模式（Loose augmentation）</strong><br>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用”放大模式”（augmentation）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line">　　　　mod.m3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　<span class="keyword">return</span> mod;</span><br><span class="line">　　&#125;)(module1);</span><br></pre></td></tr></table></figure></p>
<p>在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用”宽放大模式”<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = ( <span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line">　　　　<span class="comment">//...</span></span><br><span class="line">　　　　<span class="keyword">return</span> mod;</span><br><span class="line">　　&#125;)(<span class="built_in">window</span>.module1 || &#123;&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>测试</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleTest = ( <span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> value1=<span class="number">0</span>, privateName=<span class="string">'张三'</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateAddTopic</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 这里是内部处理代码</span></span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"内部函数"</span>);</span><br><span class="line">         <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125; </span><br><span class="line">    mod.name = privateName;</span><br><span class="line">    mod.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.f1();</span><br><span class="line">    &#125;;</span><br><span class="line">    mod.f1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"f1--hello"</span>);</span><br><span class="line">    &#125;;　</span><br><span class="line">    mod.f2=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        privateAddTopic(data);</span><br><span class="line">    &#125;;　　　</span><br><span class="line">　　<span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(<span class="built_in">window</span>.moduleTest || &#123;&#125;);</span><br><span class="line"></span><br><span class="line">moduleTest.init();</span><br><span class="line">moduleTest.f2(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(moduleTest.name); <span class="comment">//张三</span></span><br><span class="line">moduleTest.name = <span class="string">'李四'</span>;     <span class="comment">//修改模块中的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(moduleTest.name); <span class="comment">//李四</span></span><br></pre></td></tr></table></figure></p>
<h3 id="1-2-CommonJS-AMD-CMD"><a href="#1-2-CommonJS-AMD-CMD" class="headerlink" title="1.2 CommonJS/AMD/CMD"></a>1.2 CommonJS/AMD/CMD</h3><p>现代模块的基本思想实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> myModules = (<span class="function"><span class="keyword">function</span> <span class="title">Manager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> modules = &#123;&#125;; <span class="comment">//定义的模块保存在这个对象里面</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">name, deps, impl</span>) </span>&#123;<span class="comment">//impl是implement的简写，实现的方法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; deps.length; i++) &#123;</span><br><span class="line">                deps[i] = modules[deps[i]]; <span class="comment">//从保存的对象中获取依赖的模块,注：依赖的模块，肯定已经被define()存放在modules对象中了。</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            modules[name] = impl.apply(impl, deps);<span class="comment">//如果此时的模块引入别的模块deps，就将deps作为impl实现的方法的参数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * [get 通过名字获得模块]</span><br><span class="line">         * @param  &#123;[type]&#125; name [模块名]</span><br><span class="line">         * @return &#123;[type]&#125;      [完整独立模块]</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> modules[name];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            define: define,</span><br><span class="line">            get: get</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    myModules.define(<span class="string">"bar"</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello "</span> + who;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            hello: hello</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    myModules.define(<span class="string">"foo"</span>, [<span class="string">"bar"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="string">'张三'</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">awe</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(bar.hello(n).toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            awe: awe</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bar = myModules.get(<span class="string">"bar"</span>);</span><br><span class="line">    <span class="keyword">var</span> foo = myModules.get(<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line">    foo.awe();<span class="comment">//HELLO 张三</span></span><br></pre></td></tr></table></figure>
<p><strong> 1) CommonJS</strong><br>node.js的<a href="http://nodejs.org/docs/latest/api/modules.html" target="_blank" rel="external">模块系统</a>，就是参照<a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank" rel="external">CommonJS</a>规范实现的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</span><br><span class="line">math.add(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p>
<p>第二行math.add(2, 3)，在第一行require(‘math’)之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>
<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。这就催生AMD规范到来的背景。</p>
<p><strong> 2) AMD</strong><br><strong>AMD</strong>(Asynchronous Module Definition)是异步模块加载的意思，会预执行(依赖)模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="built_in">module</span>], callback);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</span><br><span class="line">　　math.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>主要有两个Javascript库实现了AMD规范：<a href="http://requirejs.org/" target="_blank" rel="external">require.js</a>和<a href="https://github.com/cujojs/curl" target="_blank" rel="external">curl.js</a></p>
<p><strong> 3) CMD</strong><br>CMD(Custom Module Definition)通用模块加载，SeaJS遵循CMD规范，并行加载所有依赖的模块， 但不会立即执行模块，等到真正需要(require)的时候才开始解析（懒执行）。<br><strong>引入SeaJS文件</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../../common/jsext/sea-debug.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>SeaJS 的简单配置</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">seajs.config(&#123;</span><br><span class="line">  base: <span class="string">"../sea-modules/"</span>,</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery/jquery/1.10.1/jquery.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 加载入口模块</span></span><br><span class="line">seajs.use(<span class="string">"../static/hello/src/main"</span>);<span class="comment">//入口</span></span><br></pre></td></tr></table></figure></p>
<p><strong>定义模块：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有模块都通过 define 来定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 require 引入依赖</span></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 exports 对外提供接口</span></span><br><span class="line">  exports.doSomething = ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 或者通过 module.exports 提供整个接口</span></span><br><span class="line">  <span class="built_in">module</span>.exports = ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>另外可以使用seajs-text加载html文件或者tpl片段，seajs-css加载css文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/seajs-text.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">define(<span class="string">"main"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// You can require `.tpl` file directly</span></span><br><span class="line"> <span class="keyword">var</span> tpl = <span class="built_in">require</span>(<span class="string">"./data.tpl"</span>)</span><br><span class="line"><span class="comment">//或者html</span></span><br><span class="line"><span class="keyword">var</span> html =<span class="built_in">require</span>(<span class="string">"./a.html"</span>);</span><br><span class="line">$(<span class="string">'.some_class'</span>).append(html);</span><br><span class="line">&#125;)</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>seajs-css<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/seajs-css.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"></span><br><span class="line"><span class="comment">// seajs can load css file after loading css plugin.</span></span><br><span class="line">seajs.use(<span class="string">"path/to/some.css"</span>);</span><br><span class="line"><span class="comment">//很多时候可以使用require的方式</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"path/to/some.css"</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-ES6时代"><a href="#2-ES6时代" class="headerlink" title="2 ES6时代"></a>2 <strong>ES6时代</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bar.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello "</span>+who;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;hello&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//foo.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;hello&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"zs"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">awe</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(bar.hello(name).toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;awe&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//baz.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar.hello(<span class="string">'张三'</span>));<span class="comment">//hello 张三</span></span><br><span class="line"></span><br><span class="line">foo.awe();<span class="comment">//HELLO ZS</span></span><br></pre></td></tr></table></figure>
<p>当然现在需要使用babel转成es5，并且要使用打包工具browserify webpack rollup 等才能直接在现在的浏览器上运行。</p>
<p>参考阅读：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="external">Javascript模块化编程（一）：模块的写法</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="external">Javascript模块化编程（二）：AMD规范</a> </li>
<li><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">Javascript模块化编程（三）：require.js的用法</a></li>
<li><a href="https://github.com/seajs" target="_blank" rel="external">seajs-github</a></li>
<li><a href="http://seajs.org/docs/" target="_blank" rel="external">seajs官网</a></li>
<li><a href="https://github.com/seajs/seajs-text/issues/1" target="_blank" rel="external">seajs-text</a></li>
<li>《你不知到的javascipt》</li>
<li><a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="external">阮一峰-es6入门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[this指针总结]]></title>
      <url>http://yoursite.com/2016/08/04/this/</url>
      <content type="html"><![CDATA[<p>文章只是简单列举了方式和一些会改变this指针的情况     </p>
<h1 id="1-探寻之，必昭然若揭"><a href="#1-探寻之，必昭然若揭" class="headerlink" title="1.探寻之，必昭然若揭"></a>1.探寻之，必昭然若揭</h1><ol>
<li>new绑定            this–&gt;新创建的对象<br><code>var bar = new foo()</code>   </li>
<li>call/bind 硬绑定      this–&gt;指定的对象<br> <code>var bar = foo.call(obj2)</code>   </li>
<li>隐式绑定       this–&gt;上下文对象<br> <code>var bar = obj1.foo()</code>   </li>
<li>默认绑定       this–&gt;全局对象window    </li>
</ol>
<p>四种情况也是按照优先级排列的    </p>
<h1 id="2-实践之，定了然于胸"><a href="#2-实践之，定了然于胸" class="headerlink" title="2.实践之，定了然于胸"></a>2.实践之，定了然于胸</h1><h2 id="2-1-回掉函数会改变this指针"><a href="#2-1-回掉函数会改变this指针" class="headerlink" title="2.1 回掉函数会改变this指针"></a>2.1 回掉函数会改变this指针</h2><p>  绑定<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbTools.queryUsrDB2Datas(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    usrResDiv.fyDiv.apply(usrResDiv,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="2-2-setTimeout-setinterval函数会改变this指针-例子见第三部分"><a href="#2-2-setTimeout-setinterval函数会改变this指针-例子见第三部分" class="headerlink" title="2.2 setTimeout/setinterval函数会改变this指针(例子见第三部分)"></a>2.2 setTimeout/setinterval函数会改变this指针(例子见第三部分)</h2><h2 id="2-3-绑定的例外"><a href="#2-3-绑定的例外" class="headerlink" title="2.3 绑定的例外"></a>2.3 绑定的例外</h2><ul>
<li><p><code>foo.call(null)</code> 使用<code>null</code>或者<code>undefined</code>,忽略传入对象的<code>this</code>,实际运用的是默认绑定，这也是这样方法的弊端，this指向<code>window</code>。<br>修改<code>var DMZ = Object.create(null); foo.apply(DMZ,[2,3]);</code></p>
</li>
<li><p>间接引用</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;a:<span class="number">3</span>,foo:foo&#125;;</span><br><span class="line"><span class="keyword">var</span> p = &#123;a:<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">o.foo();<span class="comment">//3</span></span><br><span class="line">(p.foo = o.foo)(); <span class="comment">//2 this--&gt;window</span></span><br><span class="line">p.foo();  <span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<p><code>p.foo = o.foo</code>返回值是目标函数的引用，因此调用位置是foo(),而不是<code>p.foo()</code>,<code>o.foo()</code>;</p>
<h1 id="3-避免之，需谨小事微"><a href="#3-避免之，需谨小事微" class="headerlink" title="3.避免之，需谨小事微"></a>3.避免之，需谨小事微</h1><p>除了第一部分的方法外，还有一些常用的方法。</p>
<h2 id="3-1-ES5中我们经常会使用self-this，如："><a href="#3-1-ES5中我们经常会使用self-this，如：" class="headerlink" title="3.1 ES5中我们经常会使用self = this，如："></a>3.1 ES5中我们经常会使用<code>self = this</code>，如：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(self.a);</span><br><span class="line">	&#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	a:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-ES6中的箭头函数-this词法"><a href="#3-2-ES6中的箭头函数-this词法" class="headerlink" title="3.2 ES6中的箭头函数(this词法)"></a>3.2 ES6中的箭头函数(this词法)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	setTimeout =&gt; &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);<span class="comment">//this继承来自foo()</span></span><br><span class="line">	&#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	a:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript面向对象和面向委托]]></title>
      <url>http://yoursite.com/2016/08/04/javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E5%A7%94%E6%89%98/</url>
      <content type="html"><![CDATA[<p>昨天看了一本书《你不知道的javascript(上)》关于这方面的内容，体会颇深，其中书中讲到的把javascript当作是面向委托的语言比面向对象的解释更加贴切，下面我就简单结合自己的理解，书写阐述一下，也可以作为一种笔记记录。     </p>
<h3 id="1-提取精华——几个重要的方法"><a href="#1-提取精华——几个重要的方法" class="headerlink" title="1. 提取精华——几个重要的方法"></a>1. 提取精华——几个重要的方法</h3><h4 id="1-1-原型链关联"><a href="#1-1-原型链关联" class="headerlink" title="1.1 原型链关联"></a>1.1 原型链关联</h4><ul>
<li>Bar.prototype = Foo.prototype;</li>
<li>Bar.prototype = new Foo();</li>
<li>Bar.prototype = Object.create(Foo.prototype);<br>第一种方式，没有创建Bar.prototype的新对象Bar.prototype直接引用了Foo.prototype，修改Bar.prototype会影响Foo.prototype<br>第二种方式，创建了一个关联Bar.prototype的新对象，new其实是调用Foo的“构造函数”，有些东西会影响到Bar()的后代。<br>第三种方式，Object.create() 方法创建一个拥有指定原型和若干个指定属性的对象。<br>语法：<code>Object.create(proto, [ propertiesObject ])</code><br>参数:proto 一个对象，作为新创建对象的原型。<br>   propertiesObject 可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">MDN</a>  </p>
</blockquote>
</li>
</ul>
<p>ES5之前Object.create Polyfill代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Object</span>.create)&#123;</span><br><span class="line">	<span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">		F.prototype = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> F();  <span class="comment">//new的作用参见上述 第二种方式</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ES5:<code>Object.setPrototypeOf(Bar.prototype,Foo.prototype)</code>更加标准可靠</p>
<h4 id="1-2-ES6-class"><a href="#1-2-ES6-class" class="headerlink" title="1.2 ES6 class"></a>1.2 ES6 class</h4><p>内部也是通过原型链实现的，只是一种语法糖。</p>
<h3 id="2-针尖麦芒——面向对象-OO-VS-面向委托-对象关联-OLOO"><a href="#2-针尖麦芒——面向对象-OO-VS-面向委托-对象关联-OLOO" class="headerlink" title="2.针尖麦芒——面向对象(OO) VS 面向委托(对象关联 OLOO)"></a>2.针尖麦芒——面向对象(OO) VS 面向委托(对象关联 OLOO)</h3><ul>
<li><p>OO：类的继承是复制行为，简单说关系是父子关系<br>OLOO： 只是对象的关联(基于原型/原型链)，简单说关系是兄弟关系，互相关联。</p>
</li>
<li><p>代码  </p>
</li>
</ul>
<p>OO风格：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = who;</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.identity = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"I am "</span>+<span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">	Foo.call(<span class="keyword">this</span>,who);</span><br><span class="line">&#125;</span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create(Foo.prototype);</span><br><span class="line"></span><br><span class="line">Bar.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">"hello,"</span>+<span class="keyword">this</span>.identity()+<span class="string">" ."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> Bar(<span class="string">'b1'</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="keyword">new</span> Bar(<span class="string">'b2'</span>);</span><br><span class="line">b1.speak();</span><br><span class="line">b2.speak();</span><br></pre></td></tr></table></figure>
<p>OLOO风格：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">	</span><br><span class="line">Foo = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = who;</span><br><span class="line">    &#125;,</span><br><span class="line">    identity: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"I am "</span> + <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Bar = <span class="built_in">Object</span>.create(Foo);</span><br><span class="line">Bar.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"hello,"</span> + <span class="keyword">this</span>.identity() + <span class="string">" ."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="built_in">Object</span>.create(Bar);</span><br><span class="line">b1.init(<span class="string">'b1'</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="built_in">Object</span>.create(Bar);</span><br><span class="line">b2.init(<span class="string">'b2'</span>);</span><br><span class="line">b1.speak();</span><br><span class="line">b2.speak();</span><br></pre></td></tr></table></figure></p>
<h3 id="3-问题探究"><a href="#3-问题探究" class="headerlink" title="3.问题探究"></a>3.问题探究</h3><p><strong>内省：</strong>我们想看Foo和Bar之间的关系<br>OO:对比的是Bar.prototype与Foo的关系，并不是Bar和Foo的关系<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Bar.prototype <span class="keyword">instanceof</span> Foo);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Bar.prototype) === Foo.prototype);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype.isPrototypeOf(Bar.prototype));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>OLOO:是Bar和Foo的关系<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Bar) === Foo);</span><br><span class="line"><span class="built_in">console</span>.log(Foo.isPrototypeOf(Bar));</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/06/06/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
